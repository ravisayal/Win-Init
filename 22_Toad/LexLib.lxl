object TAdvToadSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'else'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'function'
              'if'
              'import'
              'in'
              'new'
              'null'
              'return'
              'super'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ''
      '// example function'
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      ''
      '}'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'js'
    LexerName = 'Java Script'
  end
  object SyntAnalyzer2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '{ ... }'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b) '
      '     '
      'void __fastcall TForm1->Button1Click(Sender: TObject);'
      '{'
      ' int Number = 123;  // View integer number style'
      ' double FloatNumber = 0.123e+2;  // View float number style'
      
        ' Caprion = "This Number is " + IntToStr(Number); // View string ' +
        'style'
      ' Number += 0x1FA7; // View HEX style'
      ' char c = '#39'D'#39';'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp cxx h hpp'
    LexerName = 'C++'
    LineComment = '//'
  end
  object SyntAnalyzer3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Line separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'chdir'
              'chdrive'
              'choose'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'filecopy'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub start'
        StyleName = 'Sub background'
        BlockName = 'Sub start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s1 %s0'
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Sub end'
        BlockName = 'Sub start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'function'
              'if'
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bas'
    LexerName = 'Visual Basic'
    LineComment = #39
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'CDATA'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'ERROR content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15987699
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'DTD element type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'DTD bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'PI'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA'
        TokenType = 11
        Expression = '<!\[CDATA\['#13#10'#(?s)<!\[CDATA\[.*?(\]\]>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error content'
        StyleName = 'ERROR content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DTD element start'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 %s-1 >'
      end
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpAny
        CollapseFmt = 'Document structure'
      end
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/>')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'CDATA begin'
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpAny
        CollapseFmt = 'CDATA'
      end
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      
        '  <!ELEMENT web-app (icon?, display-name?, description?, distrib' +
        'utable?,'
      '  context-param*, filter*, filter-mapping*, listener*, servlet*,'
      
        '  servlet-mapping*, session-config?, mime-mapping*, welcome-file' +
        '-list?,'
      
        '  error-page*, taglib*, resource-env-ref*, resource-ref*, securi' +
        'ty-constraint*,'
      
        '  login-config?, security-role*, env-entry*, ejb-ref*,  ejb-loca' +
        'l-ref*)>'
      '  <!ELEMENT auth-constraint (description?, role-name*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      
        '  <!ELEMENT context-param (param-name, param-value, description?' +
        ')>'
      '  <!ELEMENT description (#PCDATA)>'
      '  <!ELEMENT display-name (#PCDATA)>'
      '  <!ELEMENT distributable EMPTY>'
      '  <!ELEMENT ejb-link (#PCDATA)>'
      
        '  <!ELEMENT ejb-local-ref (description?, ejb-ref-name, ejb-ref-t' +
        'ype,local-home, local, ejb-link?)>'
      
        '  <!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type,ho' +
        'me, remote, ejb-link?)>'
      '  <!ELEMENT ejb-ref-name (#PCDATA)>'
      '  <!ELEMENT ejb-ref-type (#PCDATA)>'
      
        '  <!ELEMENT env-entry (description?, env-entry-name, env-entry-v' +
        'alue?,env-entry-type)>'
      '  <!ELEMENT env-entry-name (#PCDATA)>'
      '  <!ELEMENT env-entry-type (#PCDATA)>'
      '  <!ELEMENT env-entry-value (#PCDATA)>'
      '  <!ELEMENT error-code (#PCDATA)>'
      
        '  <!ELEMENT error-page ((error-code | exception-type), location)' +
        '>'
      '  <!ELEMENT exception-type (#PCDATA)>'
      '  <!ELEMENT extension (#PCDATA)>'
      
        '  <!ELEMENT filter (icon?, filter-name, display-name?, descripti' +
        'on?,filter-class, init-param*)>'
      '  <!ELEMENT filter-class (#PCDATA)>'
      
        '  <!ELEMENT filter-mapping (filter-name, (url-pattern | servlet-' +
        'name))>'
      '  <!ELEMENT filter-name (#PCDATA)>'
      '  <!ELEMENT form-error-page (#PCDATA)>'
      
        '  <!ELEMENT form-login-config (form-login-page, form-error-page)' +
        '>'
      '  <!ELEMENT form-login-page (#PCDATA)>'
      '  <!ELEMENT home (#PCDATA)>'
      '  <!ELEMENT http-method (#PCDATA)>'
      '  <!ELEMENT icon (small-icon?, large-icon?)>'
      '  <!ELEMENT init-param (param-name, param-value, description?)>'
      '  <!ELEMENT jsp-file (#PCDATA)>'
      '  <!ELEMENT large-icon (#PCDATA)>'
      '  <!ELEMENT listener (listener-class)>'
      '  <!ELEMENT listener-class (#PCDATA)>'
      '  <!ELEMENT load-on-startup (#PCDATA)>'
      '  <!ELEMENT local (#PCDATA)>'
      '  <!ELEMENT local-home (#PCDATA)>'
      '  <!ELEMENT location (#PCDATA)>'
      
        '  <!ELEMENT login-config (auth-method?, realm-name?, form-login-' +
        'config?)>'
      '  <!ELEMENT mime-mapping (extension, mime-type)>'
      '  <!ELEMENT mime-type (#PCDATA)>'
      '  <!ELEMENT param-name (#PCDATA)>'
      '  <!ELEMENT param-value (#PCDATA)>'
      '  <!ELEMENT realm-name (#PCDATA)>'
      '  <!ELEMENT remote (#PCDATA)>'
      '  <!ELEMENT res-auth (#PCDATA)>'
      '  <!ELEMENT res-ref-name (#PCDATA)>'
      '  <!ELEMENT res-sharing-scope (#PCDATA)>'
      '  <!ELEMENT res-type (#PCDATA)>'
      
        '  <!ELEMENT resource-env-ref (description?, resource-env-ref-nam' +
        'e,resource-env-ref-type)>'
      '  <!ELEMENT resource-env-ref-name (#PCDATA)>'
      '  <!ELEMENT resource-env-ref-type (#PCDATA)>'
      
        '  <!ELEMENT resource-ref (description?, res-ref-name, res-type, ' +
        'res-auth,res-sharing-scope?)>'
      '  <!ELEMENT role-link (#PCDATA)>'
      '  <!ELEMENT role-name (#PCDATA)>'
      '  <!ELEMENT run-as (description?, role-name)>'
      
        '  <!ELEMENT security-constraint (display-name?, web-resource-col' +
        'lection+,auth-constraint?, user-data-constraint?)>'
      '  <!ELEMENT security-role (description?, role-name)>'
      
        '  <!ELEMENT security-role-ref (description?, role-name, role-lin' +
        'k?)>'
      
        '  <!ELEMENT servlet (icon?, servlet-name, display-name?, descrip' +
        'tion?,'
      
        '    (servlet-class|jsp-file), init-param*, load-on-startup?, run' +
        '-as?, security-role-ref*)>'
      '  <!ELEMENT servlet-class (#PCDATA)>'
      '  <!ELEMENT servlet-mapping (servlet-name, url-pattern)>'
      '  <!ELEMENT servlet-name (#PCDATA)>'
      '  <!ELEMENT session-config (session-timeout?)>'
      '  <!ELEMENT session-timeout (#PCDATA)>'
      '  <!ELEMENT small-icon (#PCDATA)>'
      '  <!ELEMENT taglib (taglib-uri, taglib-location)>'
      '  <!ELEMENT taglib-location (#PCDATA)>'
      '  <!ELEMENT taglib-uri (#PCDATA)>'
      '  <!ELEMENT transport-guarantee (#PCDATA)>'
      '  <!ELEMENT url-pattern (#PCDATA)>'
      
        '  <!ELEMENT user-data-constraint (description?, transport-guaran' +
        'tee)>'
      
        '  <!ELEMENT web-resource-collection (web-resource-name, descript' +
        'ion?,url-pattern*, http-method*)>'
      '  <!ELEMENT web-resource-name (#PCDATA)>'
      '  <!ELEMENT welcome-file (#PCDATA)>'
      '  <!ELEMENT welcome-file-list (welcome-file+)>'
      '  <!ATTLIST auth-constraint id ID #IMPLIED>'
      '  <!ATTLIST auth-method id ID #IMPLIED>'
      '  <!ATTLIST context-param id ID #IMPLIED>'
      '  <!ATTLIST description id ID #IMPLIED>'
      '  <!ATTLIST display-name id ID #IMPLIED>'
      '  <!ATTLIST distributable id ID #IMPLIED>'
      '  <!ATTLIST ejb-link id ID #IMPLIED>'
      '  <!ATTLIST ejb-local-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-name id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry id ID #IMPLIED>'
      '  <!ATTLIST env-entry-name id ID #IMPLIED>'
      '  <!ATTLIST env-entry-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry-value id ID #IMPLIED>'
      '  <!ATTLIST error-code id ID #IMPLIED>'
      '  <!ATTLIST error-page id ID #IMPLIED>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      '  <!ATTLIST extension id ID #IMPLIED>'
      '  <!ATTLIST filter id ID #IMPLIED>'
      '  <!ATTLIST filter-class id ID #IMPLIED>'
      '  <!ATTLIST filter-mapping id ID #IMPLIED>'
      '  <!ATTLIST filter-name id ID #IMPLIED>'
      '  <!ATTLIST form-error-page id ID #IMPLIED>'
      '  <!ATTLIST form-login-config id ID #IMPLIED>'
      '  <!ATTLIST form-login-page id ID #IMPLIED>'
      '  <!ATTLIST home id ID #IMPLIED>'
      '  <!ATTLIST http-method id ID #IMPLIED>'
      '  <!ATTLIST icon id ID #IMPLIED>'
      '  <!ATTLIST init-param id ID #IMPLIED>'
      '  <!ATTLIST jsp-file id ID #IMPLIED>'
      '  <!ATTLIST large-icon id ID #IMPLIED>'
      '  <!ATTLIST listener id ID #IMPLIED>'
      '  <!ATTLIST listener-class id ID #IMPLIED>'
      '  <!ATTLIST load-on-startup id ID #IMPLIED>'
      '  <!ATTLIST local id ID #IMPLIED>'
      '  <!ATTLIST local-home id ID #IMPLIED>'
      '  <!ATTLIST location id ID #IMPLIED>'
      '  <!ATTLIST login-config id ID #IMPLIED>'
      '  <!ATTLIST mime-mapping id ID #IMPLIED>'
      '  <!ATTLIST mime-type id ID #IMPLIED>'
      '  <!ATTLIST param-name id ID #IMPLIED>'
      '  <!ATTLIST param-value id ID #IMPLIED>'
      '  <!ATTLIST realm-name id ID #IMPLIED>'
      '  <!ATTLIST remote id ID #IMPLIED>'
      '  <!ATTLIST res-auth id ID #IMPLIED>'
      '  <!ATTLIST res-ref-name id ID #IMPLIED>'
      '  <!ATTLIST res-sharing-scope id ID #IMPLIED>'
      '  <!ATTLIST res-type id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-name id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-type id ID #IMPLIED>'
      '  <!ATTLIST resource-ref id ID #IMPLIED>'
      '  <!ATTLIST role-link id ID #IMPLIED>'
      '  <!ATTLIST role-name id ID #IMPLIED>'
      '  <!ATTLIST run-as id ID #IMPLIED>'
      '  <!ATTLIST security-constraint id ID #IMPLIED>'
      '  <!ATTLIST security-role id ID #IMPLIED>'
      '  <!ATTLIST security-role-ref id ID #IMPLIED>'
      '  <!ATTLIST servlet id ID #IMPLIED>'
      '  <!ATTLIST servlet-class id ID #IMPLIED>'
      '  <!ATTLIST servlet-mapping id ID #IMPLIED>'
      '  <!ATTLIST servlet-name id ID #IMPLIED>'
      '  <!ATTLIST session-config id ID #IMPLIED>'
      '  <!ATTLIST session-timeout id ID #IMPLIED>'
      '  <!ATTLIST small-icon id ID #IMPLIED>'
      '  <!ATTLIST taglib id ID #IMPLIED>'
      '  <!ATTLIST taglib-location id ID #IMPLIED>'
      '  <!ATTLIST taglib-uri id ID #IMPLIED>'
      '  <!ATTLIST transport-guarantee id ID #IMPLIED>'
      '  <!ATTLIST url-pattern id ID #IMPLIED>'
      '  <!ATTLIST url-pattern beep ID #IMPLIED>'
      '  <!ATTLIST user-data-constraint id ID #IMPLIED>'
      '  <!ATTLIST web-app id ID #IMPLIED>'
      '  <!ATTLIST web-resource-collection id ID #IMPLIED>'
      '  <!ATTLIST web-resource-name id ID #IMPLIED>'
      '  <!ATTLIST welcome-file id ID #IMPLIED>'
      '  <!ATTLIST welcome-file-list id ID #IMPLIED>'
      ']>'
      ''
      '<web-app>'
      '    <display-name abc="123" '
      '    def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '        <url-pattern></url-pattern>'
      '    </filter-mapping>'
      '</web-app>'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'PI'
      'Attrib. value'
      'CDATA end')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'xml xsl xslt mmpa mmpr sti bdsproj'
    LexerName = 'XML Documents'
    Left = 140
    Top = 160
  end
  object SyntAnal29: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Reserved PL/SQL word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'SQL Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Predefined Exceptions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Default Oracle Packages'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Public Package Procedure'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBtnFace
        FormatType = ftColor
        BorderTypeLeft = blDot
        BorderColorLeft = clMaroon
        BorderTypeTop = blDot
        BorderColorTop = clMaroon
        BorderTypeRight = blDot
        BorderColorRight = clMaroon
        BorderTypeBottom = blDot
        BorderColorBottom = clMaroon
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16777205
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 13369080
        FormatType = ftBackGround
      end
      item
        DisplayName = '()'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clBtnFace
        BorderTypeLeft = blDot
        BorderTypeTop = blDot
        BorderTypeRight = blDot
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Big Bold (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Toad_Datatypes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserTables'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserViews'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_UserProcs'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Toad_SYSViews'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 'REM\s.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Public Package Procedure'
        StyleName = 'Public Package Procedure'
        TokenType = 2
        Expression = 'DBMS_\w+?\.\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[\w$\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 1'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)'#39'.*?('#39'|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'A'
              'ABORT'
              'ABS'
              'ACC'
              'ACCEPT'
              'ACCESS'
              'ACCESS_INTO_NULL'
              'ACCESSED'
              'ACCOUNT'
              'ACOS'
              'ACTIVATE'
              'ADD'
              'ADD_MONTHS'
              'ADMIN'
              'ADMINISTER'
              'ADMINISTRATOR'
              'ADVISE'
              'ADVISOR'
              'AFTER'
              'ALGORITHM'
              'ALIAS'
              'ALL'
              'ALL_ROWS'
              'ALLOCATE'
              'ALLOW'
              'ALTER'
              'ALWAYS'
              'ANALYZE'
              'ANCILLARY'
              'AND'
              'AND_EQUAL'
              'ANTIJOIN'
              'ANY'
              'APPEND'
              'APPLY'
              'ARCHIVE'
              'ARCHIVELOG'
              'ARRAY'
              'ARRAYLEN'
              'AS'
              'ASC'
              'ASCII'
              'ASIN'
              'ASSOCIATE'
              'AT'
              'ATAN'
              'ATAN2'
              'ATTRIBUTE'
              'ATTRIBUTES'
              'AUDIT'
              'AUTHENTICATED'
              'AUTHENTICATION'
              'AUTHID'
              'AUTHORIZATION'
              'AUTO'
              'AUTOALLOCATE'
              'AUTOEXTEND'
              'AUTOMATIC'
              'AVAILABILITY'
              'AVG'
              'BACKUP'
              'BASE_TABLE'
              'BASICFILE'
              'BATCH'
              'BECOME'
              'BEFORE'
              'BEGIN'
              'BEGIN_OUTLINE_DATA'
              'BEHALF'
              'BETWEEN'
              'BFILE'
              'BFILENAME'
              'BIGFILE'
              'BINARY_DOUBLE'
              'BINARY_DOUBLE_INFINITY'
              'BINARY_DOUBLE_NAN'
              'BINARY_FLOAT'
              'BINARY_FLOAT_INFINITY'
              'BINARY_FLOAT_NAN'
              'BINARY_INTEGER'
              'BINDING'
              'BITAND'
              'BITMAP'
              'BITMAP_TREE'
              'BITMAPS'
              'BITS'
              'BLOB'
              'BLOCK'
              'BLOCK_RANGE'
              'BLOCKS'
              'BLOCKSIZE'
              'BODY'
              'BOOLEAN'
              'BOTH'
              'BOUND'
              'BREAK'
              'BROADCAST'
              'BTITLE'
              'BUFFER'
              'BUFFER_CACHE'
              'BUFFER_POOL'
              'BUILD'
              'BULK'
              'BY'
              'BYPASS_RECURSIVE_CHECK'
              'BYPASS_UJVC'
              'BYTE'
              'CACHE'
              'CACHE_CB'
              'CACHE_INSTANCES'
              'CACHE_TEMP_TABLE'
              'CALL'
              'CANCEL'
              'CARDINALITY'
              'CASCADE'
              'CASE'
              'CAST'
              'CATEGORY'
              'CEIL'
              'CERTIFICATE'
              'CFILE'
              'CHAINED'
              'CHANGE'
              'CHAR'
              'CHAR_BASE'
              'CHAR_CS'
              'CHARACTER'
              'CHARTOROWID'
              'CHECK'
              'CHECKPOINT'
              'CHILD'
              'CHOOSE'
              'CHR'
              'CHUNK'
              'CIV_GB'
              'CLASS'
              'CLEAR'
              'CLOB'
              'CLONE'
              'CLOSE'
              'CLOSE_CACHED_OPEN_CURSORS'
              'CLUSTER'
              'CLUSTERING_FACTOR'
              'CLUSTERS'
              'COALESCE'
              'COARSE'
              'COLLECT'
              'COLLECTION_IS_NULL'
              'COLUMN'
              'COLUMN_STATS'
              'COLUMN_VALUE'
              'COLUMNS'
              'COMMENT'
              'COMMIT'
              'COMMITTED'
              'COMPACT'
              'COMPATIBILITY'
              'COMPILE'
              'COMPLETE'
              'COMPOSITE_LIMIT'
              'COMPRESS'
              'COMPUTE'
              'CONCAT'
              'CONFORMING'
              'CONNECT'
              'CONNECT_BY_COST_BASED'
              'CONNECT_BY_FILTERING'
              'CONNECT_BY_ISCYCLE'
              'CONNECT_BY_ISLEAF'
              'CONNECT_BY_ROOT'
              'CONNECT_TIME'
              'CONSIDER'
              'CONSISTENT'
              'CONSTANT'
              'CONSTRAINT'
              'CONSTRAINTS'
              'CONTAINER'
              'CONTENT'
              'CONTENTS'
              'CONTEXT'
              'CONTINUE'
              'CONTROLFILE'
              'CONVERT'
              'COPY'
              'CORR_K'
              'CORR_S'
              'CORRUPTION'
              'COS'
              'COSH'
              'COST'
              'COUNT'
              'CPU_COSTING'
              'CPU_PER_CALL'
              'CPU_PER_SESSION'
              'CRASH'
              'CREATE'
              'CREATE_STORED_OUTLINES'
              'CROSS'
              'CUBE'
              'CUBE_GB'
              'CURRENT'
              'CURRENT_DATE'
              'CURRENT_SCHEMA'
              'CURRENT_TIME'
              'CURRENT_TIMESTAMP'
              'CURRENT_USER'
              'CURRVAL'
              'CURSOR'
              'CURSOR_ALREADY_OPEN'
              'CURSOR_SHARING_EXACT'
              'CURSOR_SPECIFIC_SEGMENT'
              'CV'
              'CYCLE'
              'DANGLING'
              'DATA'
              'DATABASE'
              'DATAFILE'
              'DATAFILES'
              'DATAOBJNO'
              'DATE'
              'DATE_MODE'
              'DAY'
              'DB_ROLE_CHANGE'
              'DBA'
              'DBA_RECYCLEBIN'
              'DBMS_STATS'
              'DBTIMEZONE'
              'DDL'
              'DEALLOCATE'
              'DEBUG'
              'DEBUGOFF'
              'DEBUGON'
              'DEC'
              'DECIMAL'
              'DECLARE'
              'DECODE'
              'DECREMENT'
              'DECRYPT'
              'DEDUPLICATE'
              'DEF'
              'DEFAULT'
              'DEFERRABLE'
              'DEFERRED'
              'DEFINE'
              'DEFINE_EDITOR'
              'DEFINED'
              'DEFINER'
              'DEFINITION'
              'DEGREE'
              'DEL'
              'DELAY'
              'DELETE'
              'DELETING'
              'DELTA'
              'DEMAND'
              'DENSE_RANK'
              'DEQUEUE'
              'DEREF'
              'DEREF_NO_REWRITE'
              'DESC'
              'DESCRIBE'
              'DETACHED'
              'DETERMINES'
              'DICTIONARY'
              'DIGITS'
              'DIMENSION'
              'DIRECT_LOAD'
              'DIRECTORY'
              'DISABLE'
              'DISABLE_RPKE'
              'DISASSOCIATE'
              'DISCONNECT'
              'DISK'
              'DISKGROUP'
              'DISKS'
              'DISMOUNT'
              'DISPATCHERS'
              'DISTINCT'
              'DISTINGUISHED'
              'DISTRIBUTED'
              'DML'
              'DML_UPDATE'
              'DO'
              'DOCUMENT'
              'DOMAIN_INDEX_NO_SORT'
              'DOMAIN_INDEX_SORT'
              'DOUBLE'
              'DOWNGRADE'
              'DRIVING_SITE'
              'DROP'
              'DUMP'
              'DUP_VAL_ON_INDEX'
              'DYNAMIC'
              'DYNAMIC_SAMPLING'
              'DYNAMIC_SAMPLING_EST_CDN'
              'E'
              'EACH'
              'EDIT'
              'ELEMENT'
              'ELIMINATE_JOIN'
              'ELIMINATE_OBY'
              'ELIMINATE_OUTER_JOIN'
              'ELSE'
              'ELSIF'
              'EMPTY'
              'EMPTY_BLOB'
              'EMPTY_CLOB'
              'ENABLE'
              'ENCRYPT'
              'ENCRYPTED'
              'ENCRYPTION'
              'END'
              'END_OUTLINE_DATA'
              'ENFORCE'
              'ENFORCED'
              'ENQUEUE'
              'ENTERPRISE'
              'ENTRY'
              'ERROR'
              'ERROR_ON_OVERLAP_TIME'
              'ERRORS'
              'ESCAPE'
              'ESTIMATE'
              'EVALNAME'
              'EVALUATION'
              'EVENTS'
              'EXCEPT'
              'EXCEPTION'
              'EXCEPTION_INIT'
              'EXCEPTIONS'
              'EXCHANGE'
              'EXCLUDING'
              'EXCLUSIVE'
              'EXEC'
              'EXECUTE'
              'EXEMPT'
              'EXISTS'
              'EXIT'
              'EXP'
              'EXPAND_GSET_TO_UNION'
              'EXPIRE'
              'EXPLAIN'
              'EXPLOSION'
              'EXPORT'
              'EXPR_CORR_CHECK'
              'EXTEND'
              'EXTENDS'
              'EXTENT'
              'EXTENTS'
              'EXTERNAL'
              'EXTERNALLY'
              'EXTRACT'
              'FACT'
              'FAILED'
              'FAILED_LOGIN_ATTEMPTS'
              'FAILGROUP'
              'FALSE'
              'FAST'
              'FBTSCAN'
              'FETCH'
              'FIC_CIV'
              'FIC_PIV'
              'FILE'
              'FILESYSTEM_LIKE_LOGGING'
              'FILTER'
              'FINAL'
              'FINE'
              'FINISH'
              'FIRST'
              'FIRST_ROWS'
              'FLAGGER'
              'FLASHBACK'
              'FLOAT'
              'FLOB'
              'FLOOR'
              'FLUSH'
              'FOLLOWING'
              'FOR'
              'FORALL'
              'FORCE'
              'FORCE_XML_QUERY_REWRITE'
              'FOREIGN'
              'FORM'
              'FORTRAN'
              'FOUND'
              'FREELIST'
              'FREELISTS'
              'FREEPOOLS'
              'FRESH'
              'FROM'
              'FULL'
              'FUNCTION'
              'FUNCTIONS'
              'G'
              'GATHER_PLAN_STATISTICS'
              'GBY_CONC_ROLLUP'
              'GENERATED'
              'GENERIC'
              'GET'
              'GLOBAL'
              'GLOBAL_NAME'
              'GLOBAL_TOPIC_ENABLED'
              'GLOBALLY'
              'GO'
              'GOTO'
              'GRANT'
              'GREATEST'
              'GROUP'
              'GROUP_BY'
              'GROUPING'
              'GROUPS'
              'GUARANTEE'
              'GUARANTEED'
              'GUARD'
              'HASH'
              'HASH_AJ'
              'HASH_SJ'
              'HASHKEYS'
              'HAVING'
              'HEADER'
              'HEAP'
              'HELP'
              'HEXTORAW'
              'HIERARCHY'
              'HIGH'
              'HINTSET_BEGIN'
              'HINTSET_END'
              'HOST'
              'HOUR'
              'HWM_BROKERED'
              'ID'
              'IDENTIFIED'
              'IDENTIFIER'
              'IDENTITY'
              'IDGENERATORS'
              'IDLE_TIME'
              'IF'
              'IGNORE'
              'IGNORE NAV'
              'IGNORE_OPTIM_EMBEDDED_HINTS'
              'IGNORE_WHERE_CLAUSE'
              'IMMEDIATE'
              'IMPORT'
              'IN'
              'IN_MEMORY_METADATA'
              'INCLUDE_VERSION'
              'INCLUDING'
              'INCREMENT'
              'INCREMENTAL'
              'INDEX'
              'INDEX_ASC'
              'INDEX_COMBINE'
              'INDEX_DESC'
              'INDEX_FFS'
              'INDEX_FILTER'
              'INDEX_JOIN'
              'INDEX_ROWS'
              'INDEX_RRS'
              'INDEX_SCAN'
              'INDEX_SKIP_SCAN'
              'INDEX_SS'
              'INDEX_SS_ASC'
              'INDEX_SS_DESC'
              'INDEX_STATS'
              'INDEXED'
              'INDEXES'
              'INDEXTYPE'
              'INDEXTYPES'
              'INDICATOR'
              'INFINITE'
              'INFORMATIONAL'
              'INITCAP'
              'INITIAL'
              'INITIALIZED'
              'INITIALLY'
              'INITRANS'
              'INLINE'
              'INLINE_XMLTYPE_NT'
              'INNER'
              'INPUT'
              'INSERT'
              'INSERTING'
              'INSTANCE'
              'INSTANCES'
              'INSTANTIABLE'
              'INSTANTLY'
              'INSTEAD'
              'INSTR'
              'INSTRB'
              'INT'
              'INTEGER'
              'INTEGRITY'
              'INTERFACE'
              'INTERMEDIATE'
              'INTERNAL_CONVERT'
              'INTERNAL_USE'
              'INTERPRETED'
              'INTERSECT'
              'INTERVAL'
              'INTO'
              'INVALID_CURSOR'
              'INVALID_NUMBER'
              'INVALIDATE'
              'INVISIBLE'
              'IS'
              'IS A SET'
              'IS ANY'
              'IS EMPTY'
              'IS PRESENT'
              'ISOLATION'
              'ISOLATION_LEVEL'
              'ITERATE'
              'ITERATION_NUMBER'
              'JAVA'
              'JOB'
              'JOIN'
              'K'
              'KEEP'
              'KEEP_DUPLICATES'
              'KERBEROS'
              'KEY'
              'KEY_LENGTH'
              'KEYFILE'
              'KEYS'
              'KEYSIZE'
              'KILL'
              'LABEL'
              'LANGUAGE'
              'LAST'
              'LAST_DAY'
              'LATERAL'
              'LAYER'
              'LDAP_REG_SYNC_INTERVAL'
              'LDAP_REGISTRATION'
              'LDAP_REGISTRATION_ENABLED'
              'LEADING'
              'LEAST'
              'LEFT'
              'LENGTH'
              'LENGTHB'
              'LESS'
              'LEVEL'
              'LEVELS'
              'LIBRARY'
              'LIKE'
              'LIKE_EXPAND'
              'LIKE2'
              'LIKE4'
              'LIKEC'
              'LIMIT'
              'LIMITED'
              'LINK'
              'LIST'
              'LISTS'
              'LN'
              'LOB'
              'LOCAL'
              'LOCAL_INDEXES'
              'LOCALTIME'
              'LOCALTIMESTAMP'
              'LOCATION'
              'LOCATOR'
              'LOCK'
              'LOCKED'
              'LOG'
              'LOGFILE'
              'LOGGING'
              'LOGICAL'
              'LOGICAL_READS_PER_CALL'
              'LOGICAL_READS_PER_SESSION'
              'LOGIN_DENIED'
              'LOGOFF'
              'LOGON'
              'LONG'
              'LOOP'
              'LOWER'
              'LPAD'
              'LTRIM'
              'M'
              'MAIN'
              'MAKE_REF'
              'MANAGE'
              'MANAGED'
              'MANAGEMENT'
              'MANUAL'
              'MAPPING'
              'MASTER'
              'MATCHED'
              'MATERIALIZE'
              'MATERIALIZED'
              'MAX'
              'MAXARCHLOGS'
              'MAXDATAFILES'
              'MAXEXTENTS'
              'MAXIMIZE'
              'MAXINSTANCES'
              'MAXLOGFILES'
              'MAXLOGHISTORY'
              'MAXLOGMEMBERS'
              'MAXSIZE'
              'MAXTRANS'
              'MAXVALUE'
              'MEASURES'
              'MEDIAN'
              'MEDIUM'
              'MEMBER'
              'MEMORY'
              'MERGE'
              'MERGE_AJ'
              'MERGE_CONST_ON'
              'MERGE_SJ'
              'METHOD'
              'MIGRATE'
              'MIN'
              'MINEXTENTS'
              'MINIMIZE'
              'MINIMUM'
              'MINUS'
              'MINUS_NULL'
              'MINUTE'
              'MINVALUE'
              'MIRROR'
              'MLSLABEL'
              'MOD'
              'MODE'
              'MODEL'
              'MODEL_COMPILE_SUBQUERY'
              'MODEL_DONTVERIFY_UNIQUENESS'
              'MODEL_DYNAMIC_SUBQUERY'
              'MODEL_MIN_ANALYSIS'
              'MODEL_NO_ANALYSIS'
              'MODEL_PBY'
              'MODEL_PUSH_REF'
              'MODIFY'
              'MONITORING'
              'MONTH'
              'MONTHS_BETWEEN'
              'MOUNT'
              'MOVE'
              'MOVEMENT'
              'MTS_DISPATCHERS'
              'MULTISET'
              'MV_MERGE'
              'NAME'
              'NAMED'
              'NAN'
              'NANVL'
              'NATIONAL'
              'NATIVE'
              'NATURAL'
              'NATURALN'
              'NAV'
              'NCHAR'
              'NCHAR_CS'
              'NCLOB'
              'NEEDED'
              'NESTED'
              'NESTED_TABLE_FAST_INSERT'
              'NESTED_TABLE_GET_REFS'
              'NESTED_TABLE_ID'
              'NESTED_TABLE_SET_REFS'
              'NESTED_TABLE_SET_SETID'
              'NETWORK'
              'NEVER'
              'NEW'
              'NEW_TIME'
              'NEXT'
              'NEXT_DAY'
              'NEXTVAL'
              'NL_AJ'
              'NL_SJ'
              'NLS_CALENDAR'
              'NLS_CHARACTERSET'
              'NLS_CHARSET_DECL_LEN'
              'NLS_CHARSET_ID'
              'NLS_CHARSET_NAME'
              'NLS_COMP'
              'NLS_CURRENCY'
              'NLS_DATE_FORMAT'
              'NLS_DATE_LANGUAGE'
              'NLS_INITCAP'
              'NLS_ISO_CURRENCY'
              'NLS_LANG'
              'NLS_LANGUAGE'
              'NLS_LENGTH_SEMANTICS'
              'NLS_LOWER'
              'NLS_NCHAR_CONV_EXCP'
              'NLS_NUMERIC_CHARACTERS'
              'NLS_SORT'
              'NLS_SPECIAL_CHARS'
              'NLS_TERRITORY'
              'NLS_UPPER'
              'NLSSORT'
              'NO'
              'NO_ACCESS'
              'NO_BASETABLE_MULTIMV_REWRITE'
              'NO_BUFFER'
              'NO_CARTESIAN'
              'NO_CONNECT_BY_COST_BASED'
              'NO_CONNECT_BY_FILTERING'
              'NO_CPU_COSTING'
              'NO_DATA_FOUND'
              'NO_ELIMINATE_JOIN'
              'NO_ELIMINATE_OBY'
              'NO_ELIMINATE_OUTER_JOIN'
              'NO_EXPAND'
              'NO_EXPAND_GSET_TO_UNION'
              'NO_FACT'
              'NO_FILTERING'
              'NO_INDEX'
              'NO_INDEX_FFS'
              'NO_INDEX_SS'
              'NO_MERGE'
              'NO_MODEL_PUSH_REF'
              'NO_MONITORING'
              'NO_MULTIMV_REWRITE'
              'NO_ORDER_ROLLUPS'
              'NO_PARALLEL'
              'NO_PARALLEL_INDEX'
              'NO_PARTIAL_COMMIT'
              'NO_PRUNE_GSETS'
              'NO_PULL_PRED'
              'NO_PUSH_PRED'
              'NO_PUSH_SUBQ'
              'NO_PX_JOIN_FILTER'
              'NO_QKN_BUFF'
              'NO_QUERY_TRANSFORMATION'
              'NO_REF_CASCADE'
              'NO_REWRITE'
              'NO_SEMIJOIN'
              'NO_SET_TO_JOIN'
              'NO_SQL_TUNE'
              'NO_STAR_TRANSFORMATION'
              'NO_STATS_GSETS'
              'NO_SWAP_JOIN_INPUTS'
              'NO_TEMP_TABLE'
              'NO_UNNEST'
              'NO_USE_HASH'
              'NO_USE_HASH_AGGREGATION'
              'NO_USE_MERGE'
              'NO_USE_NL'
              'NO_XML_QUERY_REWRITE'
              'NOAPPEND'
              'NOARCHIVELOG'
              'NOAUDIT'
              'NOCACHE'
              'NOCOMPRESS'
              'NOCOPY'
              'NOCPU_COSTING'
              'NOCYCLE'
              'NODELAY'
              'NOFORCE'
              'NOGUARANTEE'
              'NOLOGGING'
              'NOMAPPING'
              'NOMAXVALUE'
              'NOMINIMIZE'
              'NOMINVALUE'
              'NOMONITORING'
              'NOMOUNT'
              'NONE'
              'NOORDER'
              'NOOVERRIDE'
              'NOPARALLEL'
              'NOPARALLEL_INDEX'
              'NORELY'
              'NOREPAIR'
              'NORESETLOGS'
              'NOREVERSE'
              'NOREWRITE'
              'NORMAL'
              'NOROWDEPENDENCIES'
              'NOSEGMENT'
              'NOSORT'
              'NOSTRICT'
              'NOSTRIPE'
              'NOSWITCH'
              'NOT'
              'NOT_LOGGED_ON'
              'NOTFOUND'
              'NOTHING'
              'NOTIFICATION'
              'NOVALIDATE'
              'NOWAIT'
              'NULL'
              'NULLIF'
              'NULLS'
              'NUMBER'
              'NUMBER_BASE'
              'NUMERIC'
              'NVARCHAR'
              'NVARCHAR2'
              'NVL'
              'OBJECT'
              'OBJNO'
              'OBJNO_REUSE'
              'OCIROWID'
              'OF'
              'OFF'
              'OFFLINE'
              'OID'
              'OIDINDEX'
              'OLD'
              'OLD_PUSH_PRED'
              'ON'
              'ONLINE'
              'ONLY'
              'OPAQUE'
              'OPAQUE_TRANSFORM'
              'OPAQUE_XCANONICAL'
              'OPCODE'
              'OPEN'
              'OPERATIONS'
              'OPERATOR'
              'OPT_ESTIMATE'
              'OPT_PARAM'
              'OPTIMAL'
              'OPTIMIZER_FEATURES_ENABLE'
              'OPTIMIZER_GOAL'
              'OPTION'
              'OR'
              'OR_EXPAND'
              'ORA_HASH'
              'ORA_ROWSCN'
              'ORDER'
              'ORDERED'
              'ORDERED_PREDICATES'
              'ORDINALITY'
              'ORGANIZATION'
              'OSERROR'
              'OTHERS'
              'OUT'
              'OUT_OF_LINE'
              'OUTER'
              'OUTLINE'
              'OUTLINE_LEAF'
              'OVER'
              'OVERFLOW'
              'OVERFLOW_NOMOVE'
              'OVERLAPS'
              'OWN'
              'P'
              'PACKAGE'
              'PACKAGES'
              'PARALLEL'
              'PARALLEL_INDEX'
              'PARAMETERS'
              'PARENT'
              'PARITY'
              'PARTIALLY'
              'PARTITION'
              'PARTITION_HASH'
              'PARTITION_LIST'
              'PARTITION_RANGE'
              'PARTITIONS'
              'PASSING'
              'PASSWORD'
              'PASSWORD_GRACE_TIME'
              'PASSWORD_LIFE_TIME'
              'PASSWORD_LOCK_TIME'
              'PASSWORD_REUSE_MAX'
              'PASSWORD_REUSE_TIME'
              'PASSWORD_VERIFY_FUNCTION'
              'PATH'
              'PATHS'
              'PAUSE'
              'PCTFREE'
              'PCTINCREASE'
              'PCTTHRESHOLD'
              'PCTUSED'
              'PCTVERSION'
              'PERCENT'
              'PERFORMANCE'
              'PERMANENT'
              'PFILE'
              'PHYSICAL'
              'PIV_GB'
              'PIV_SSF'
              'PLAN'
              'PLI'
              'PLS_INTEGER'
              'PLSQL_CCFLAGS'
              'PLSQL_CODE_TYPE'
              'PLSQL_DEBUG'
              'PLSQL_OPTIMIZE_LEVEL'
              'PLSQL_WARNINGS'
              'POINT'
              'POLICY'
              'POSITIVE'
              'POSITIVEN'
              'POST_TRANSACTION'
              'POWER'
              'POWERMULTISET'
              'POWERMULTISET_BY_CARDINALITY'
              'PQ_DISTRIBUTE'
              'PQ_MAP'
              'PQ_NOMAP'
              'PRAGMA'
              'PREBUILT'
              'PRECEDING'
              'PRECISION'
              'PRECOMPUTE_SUBQUERY'
              'PREPARE'
              'PRESENT'
              'PRESENTNNV'
              'PRESENTV'
              'PRESERVE'
              'PRESERVE_OID'
              'PREVIOUS'
              'PRIMARY'
              'PRINT'
              'PRIOR'
              'PRIVATE'
              'PRIVATE_SGA'
              'PRIVILEGE'
              'PRIVILEGES'
              'PROCEDURE'
              'PROFILE'
              'PROGRAM'
              'PROGRAM_ERROR'
              'PROJECT'
              'PROMPT'
              'PROTECTED'
              'PROTECTION'
              'PUBLIC'
              'PULL_PRED'
              'PURGE'
              'PUSH_PRED'
              'PUSH_SUBQ'
              'PX_GRANULE'
              'PX_JOIN_FILTER'
              'QB_NAME'
              'QUERY'
              'QUERY_BLOCK'
              'QUEUE'
              'QUEUE_CURR'
              'QUEUE_ROWP'
              'QUIESCE'
              'QUOTA'
              'RAISE'
              'RAISE_APPLICATION_ERROR'
              'RANDOM'
              'RANGE'
              'RAPIDLY'
              'RAW'
              'RAWTOHEX'
              'RBA'
              'RBO_OUTLINE'
              'READ'
              'READS'
              'REAL'
              'REBALANCE'
              'REBUILD'
              'RECORD'
              'RECORDS_PER_BLOCK'
              'RECOVER'
              'RECOVERABLE'
              'RECOVERY'
              'RECYCLE'
              'RECYCLEBIN'
              'REDUCED'
              'REDUNDANCY'
              'REF'
              'REF_CASCADE_CURSOR'
              'REFERENCE'
              'REFERENCED'
              'REFERENCES'
              'REFERENCING'
              'REFRESH'
              'REFTOHEX'
              'REGEXP_INSTR'
              'REGEXP_LIKE'
              'REGEXP_REPLACE'
              'REGEXP_SUBSTR'
              'REGISTER'
              'REJECT'
              'REKEY'
              'RELATIONAL'
              'release'
              'RELY'
              'rem'
              'REMAINDER'
              'REMARK'
              'REMOTE_MAPPED'
              'RENAME'
              'REPAIR'
              'REPLACE'
              'REQUIRED'
              'RESET'
              'RESETLOGS'
              'RESIZE'
              'RESOLVE'
              'RESOLVER'
              'RESOURCE'
              'RESTORE'
              'RESTORE_AS_INTERVALS'
              'RESTRICT'
              'RESTRICT_ALL_REF_CONS'
              'RESTRICT_REFERENCES'
              'RESTRICTED'
              'RESUMABLE'
              'RESUME'
              'RETENTION'
              'RETURN'
              'RETURNING'
              'REUSE'
              'REVERSE'
              'REVOKE'
              'REWRITE'
              'REWRITE_OR_ERROR'
              'RIGHT'
              'rnds'
              'rnps'
              'ROLE'
              'ROLES'
              'ROLLBACK'
              'ROLLING'
              'ROLLUP'
              'ROUND'
              'ROW'
              'ROW_LENGTH'
              'rowcount'
              'ROWDEPENDENCIES'
              'ROWID'
              'ROWIDTOCHAR'
              'ROWLABEL'
              'ROWNUM'
              'ROWS'
              'ROWTYPE'
              'RPAD'
              'RTRIM'
              'RULE'
              'RULES'
              'RUN'
              'RUNFORM'
              'SALT'
              'SAMPLE'
              'SAVE'
              'SAVE_AS_INTERVALS'
              'SAVEPOINT'
              'SB4'
              'SCALE'
              'SCALE_ROWS'
              'SCAN'
              'SCAN_INSTANCES'
              'SCHEDULER'
              'SCHEMA'
              'SCN'
              'SCN_ASCENDING'
              'SCN_TO_TIMESTAMP'
              'SCOPE'
              'SD_ALL'
              'SD_INHIBIT'
              'SD_SHOW'
              'SECOND'
              'SECTION'
              'SECUREFILE'
              'SECURITY'
              'SEED'
              'SEG_BLOCK'
              'SEG_FILE'
              'SEGMENT'
              'SELECT'
              'SELECTIVITY'
              'SEMIJOIN'
              'SEMIJOIN_DRIVER'
              'SEPARATE'
              'SEQUENCE'
              'SEQUENCED'
              'SEQUENTIAL'
              'SEQUENTUAL'
              'SERIALIZABLE'
              'SERVERERROR'
              'SESSION'
              'SESSION_CACHED_CURSORS'
              'SESSIONS_PER_USER'
              'SESSIONTIMEZONE'
              'SESSIONTZNAME'
              'SET'
              'SET_TO_JOIN'
              'SET_TRANSACTION_USE'
              'SETS'
              'SETTINGS'
              'SEVERE'
              'SHARE'
              'SHARED'
              'SHARED_POOL'
              'SHOW'
              'SHRINK'
              'SHUTDOWN'
              'SIBLINGS'
              'SID'
              'SIGN'
              'SIMPLE'
              'SIN'
              'SINGLE'
              'SINGLE REFERENCE'
              'SINGLETASK'
              'SINH'
              'SIZE'
              'SKIP'
              'SKIP_EXT_OPTIMIZER'
              'SKIP_UNQ_UNUSABLE_IDX'
              'SKIP_UNUSABLE_INDEXES'
              'SMALLFILE'
              'SMALLINT'
              'SNAPSHOT'
              'SOME'
              'SORT'
              'SOUNDEX'
              'SOURCE'
              'SPACE'
              'SPECIFICATION'
              'SPFILE'
              'SPLIT'
              'spo'
              'SPOOL'
              'SPREADSHEET'
              'SQL'
              'SQL_TRACE'
              'SQLBUF'
              'SQLCODE'
              'SQLERRM'
              'SQLERROR'
              'SQLLDR'
              'SQLPLUS'
              'SQLSTATE'
              'SQRT'
              'STA'
              'STANDALONE'
              'STANDBY'
              'STAR'
              'STAR_TRANSFORMATION'
              'START'
              'STARTUP'
              'STATEMENT'
              'STATEMENT_ID'
              'STATIC'
              'STATISTICS'
              'STATS_BINOMIAL_TEST'
              'STATS_CROSSTAB'
              'STATS_F_TEST'
              'STATS_KS_TEST'
              'STATS_MODE'
              'STATS_MW_TEST'
              'STATS_ONE_WAY_ANOVA'
              'STATS_T_TEST_INDEP'
              'STATS_T_TEST_INDEPU'
              'STATS_T_TEST_ONE'
              'STATS_T_TEST_PAIRED'
              'STATS_WSR_TEST'
              'STDDEV'
              'STOP'
              'STORAGE'
              'STORAGE_ERROR'
              'STORE'
              'STREAMS'
              'STRICT'
              'STRING'
              'STRIP'
              'STRIPE'
              'STRUCTURE'
              'SUBMULTISET'
              'SUBPARTITION'
              'SUBPARTITION_REL'
              'SUBPARTITIONS'
              'SUBQUERIES'
              'SUBSCRIPT_BEYOND_COUNT'
              'SUBSCRIPT_OUTSIDE_LIMIT'
              'SUBSTITUTABLE'
              'SUBSTR'
              'SUBSTRB'
              'SUBTYPE'
              'SUCCESSFUL'
              'SUM'
              'SUMMARY'
              'SUPPLEMENTAL'
              'SUSPEND'
              'SWAP_JOIN_INPUTS'
              'SWITCH'
              'SWITCHOVER'
              'SYNONYM'
              'SYS_CONNECT_BY_PATH'
              'SYS_DL_CURSOR'
              'SYS_FBT_INSDEL'
              'SYS_OP_BITVEC'
              'SYS_OP_CAST'
              'SYS_OP_COL_PRESENT'
              'SYS_OP_ENFORCE_NOT_NULL$'
              'SYS_OP_EXTRACT'
              'SYS_OP_MINE_VALUE'
              'SYS_OP_NOEXPAND'
              'SYS_OP_NTCIMG$'
              'SYS_PARALLEL_TXN'
              'SYS_RID_ORDER'
              'SYS_XMLAGG'
              'SYS_XMLGEN'
              'SYSAUX'
              'SYSDATE'
              'SYSDBA'
              'SYSOPER'
              'SYSTEM'
              'SYSTIMESTAMP'
              'T'
              'TABAUTH'
              'TABLE'
              'TABLE_STATS'
              'TABLES'
              'TABLESPACE'
              'TABLESPACE_NO'
              'TABNO'
              'TAN'
              'TANH'
              'TASK'
              'TEMP_TABLE'
              'TEMPFILE'
              'TEMPLATE'
              'TEMPORARY'
              'TERMINATE'
              'TEST'
              'THAN'
              'THE'
              'THEN'
              'THREAD'
              'THROUGH'
              'TIME'
              'TIME_ZONE'
              'TIMEOUT'
              'TIMEOUT_ON_RESOURCE'
              'TIMESTAMP'
              'TIMEZONE_ABBR'
              'TIMEZONE_HOUR'
              'TIMEZONE_MINUTE'
              'TIMEZONE_OFFSET'
              'TIMEZONE_REGION'
              'TIMING'
              'TIV_GB'
              'TIV_SSF'
              'TO'
              'TO_BINARY_DOUBLE'
              'TO_BINARY_FLOAT'
              'TO_CHAR'
              'TO_DATE'
              'TO_MULTI_BYTE'
              'TO_NUMBER'
              'TO_SINGLE_BYTE'
              'TOO_MANY_ROWS'
              'TOPLEVEL'
              'TRACE'
              'TRACING'
              'TRACKING'
              'TRAILING'
              'TRANSACTION'
              'TRANSACTIONAL'
              'TRANSITIONAL'
              'TRANSLATE'
              'TREAT'
              'TRIGGER'
              'TRIGGERS'
              'TRUE'
              'TRUNC'
              'TRUNCATE'
              'TRUSTED'
              'TTITLE'
              'TUNING'
              'TX'
              'TYPE'
              'TYPES'
              'TZ_OFFSET'
              'U'
              'UB2'
              'UBA'
              'UI'
              'UID'
              'UNARCHIVED'
              'UNBOUND'
              'UNBOUNDED'
              'UNDEF'
              'UNDEFINE'
              'UNDER'
              'UNDO'
              'UNDROP'
              'UNIFORM'
              'UNION'
              'UNIQUE'
              'UNLIMITED'
              'UNLOCK'
              'UNNEST'
              'UNPACKED'
              'UNPROTECTED'
              'UNQUIESCE'
              'UNRECOVERABLE'
              'UNTIL'
              'UNUSABLE'
              'UNUSED'
              'UPD_INDEXES'
              'UPD_JOININDEX'
              'UPDATABLE'
              'UPDATE'
              'UPDATED'
              'UPDATING'
              'UPGRADE'
              'UPPER'
              'UPSERT'
              'UROWID'
              'USAGE'
              'USE'
              'USE_ANTI'
              'USE_CONCAT'
              'USE_HASH'
              'USE_HASH_AGGREGATION'
              'USE_MERGE'
              'USE_NL'
              'USE_NL_WITH_INDEX'
              'USE_PRIVATE_OUTLINES'
              'USE_SEMI'
              'USE_STORED_OUTLINES'
              'USE_TTT_FOR_GSETS'
              'USE_WEAK_NAME_RESL'
              'USER'
              'USER_DEFINED'
              'USER_RECYCLEBIN'
              'USERENV'
              'USERS'
              'USING'
              'VALIDATE'
              'VALIDATION'
              'VALUE'
              'VALUE_ERROR'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VARIABLE'
              'VARIANCE'
              'VARRAY'
              'VARYING'
              'VECTOR_READ'
              'VECTOR_READ_TRACE'
              'VERSION'
              'VERSIONS'
              'VIEW'
              'VIEWS'
              'VISIBLE'
              'VSIZE'
              'WAIT'
              'WALLET'
              'WELLFORMED'
              'WHEN'
              'WHENEVER'
              'WHERE'
              'WHILE'
              'WHITESPACE'
              'WITH'
              'WITHIN'
              'WITHOUT'
              'WNDS'
              'WNPS'
              'WORK'
              'WRAPPED'
              'WRITE'
              'X_DYN_PRUNE'
              'XID'
              'XMLATTRIBUTES'
              'XMLCOLATTVAL'
              'XMLELEMENT'
              'XMLFOREST'
              'XMLNAMESPACES'
              'XMLPARSE'
              'XMLPI'
              'XMLQUERY'
              'XMLROOT'
              'XMLSCHEMA'
              'XMLSERIALIZE'
              'XMLTABLE'
              'XMLTYPE'
              'YEAR'
              'YES'
              'ZERO_DIVIDE'
              'ZONE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL*Plus Commands'
        StyleName = 'SQL*Plus Meta Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'ABORT'
              'ACC'
              'ACCEPT'
              'APPEND'
              'BREAK'
              'BTITLE'
              'CHANGE'
              'CLEAR'
              'COLUMN'
              'COMPUTE'
              'CONNECT'
              'COPY'
              'DEF'
              'DEFINE'
              'DEFINE_EDITOR'
              'DEL'
              'DESC'
              'DESCRIBE'
              'DISCONNECT'
              'EDIT'
              'EXEC'
              'EXECUTE'
              'EXIT'
              'GET'
              'HELP'
              'HOST'
              'IMMEDIATE'
              'INPUT'
              'LIST'
              'MOUNT'
              'NOMOUNT'
              'NORMAL'
              'OFF'
              'OSERROR'
              'PAUSE'
              'PRINT'
              'PROMPT'
              'REM'
              'REMARK'
              'RUN'
              'RUNFORM'
              'SAVE'
              'SET'
              'SHOW'
              'SHUTDOWN'
              'SPO'
              'SPOOL'
              'SQLERROR'
              'SQLPLUS'
              'STA'
              'START'
              'STARTUP'
              'TIMING'
              'TRANSACTIONAL'
              'TTITLE'
              'UNDEF'
              'UNDEFINE'
              'VARIABLE'
              'WHENEVER')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'SQL Functions'
        StyleName = 'SQL Functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'add_months'
              'ascii'
              'asciistr'
              'asin'
              'atan'
              'atan2'
              'avg'
              'bfilename'
              'bin_to_num'
              'bitand'
              'cast'
              'ceil'
              'chartorowid'
              'chr'
              'coalesce'
              'compose'
              'concat'
              'convert'
              'corr'
              'cos'
              'cosh'
              'count'
              'covar_pop'
              'covar_samp'
              'cume_dist'
              'current_date'
              'current_timestamp'
              'dbtimezone'
              'decode'
              'decompose'
              'dense_rank'
              'depth'
              'deref'
              'dump'
              'empty_blob'
              'empty_clob'
              'existsnode'
              'exp'
              'extract'
              'extractvalue'
              'first'
              'floor'
              'from_tz'
              'greatest'
              'group_id'
              'grouping'
              'grouping_id'
              'hextoraw'
              'initcap'
              'instr'
              'last'
              'last_day'
              'least'
              'length'
              'ln'
              'localtimestamp'
              'log'
              'lower'
              'lpad'
              'ltrim'
              'make_ref'
              'max'
              'min'
              'mod'
              'months_between'
              'new_time'
              'next_day'
              'nls_charset_decl_len'
              'nls_charset_id'
              'nls_charset_name'
              'nls_initcap'
              'nls_lower'
              'nls_upper'
              'nlssort'
              'nullif'
              'numtodsinterval'
              'numtoyminterval'
              'nvl'
              'nvl2'
              'path'
              'percent_rank'
              'percentile_cont'
              'percentile_disc'
              'power'
              'rank'
              'rawtohex'
              'rawtonhex'
              'ref'
              'reftohex'
              'regr_avgx'
              'regr_avgy'
              'regr_count'
              'regr_intercept'
              'regr_r2'
              'regr_slope'
              'regr_sxx'
              'regr_sxystddev'
              'regr_syy'
              'round'
              'rowidtochar'
              'rowidtonchar'
              'rpad'
              'rtrim'
              'sessiontimezone'
              'sign'
              'sin'
              'sinh'
              'soundex'
              'sqrt'
              'stddev'
              'stddev_pop'
              'stddev_samp'
              'substr'
              'sum'
              'sys_connect_by_path'
              'sys_context'
              'sys_dburigen'
              'sys_extract_utc'
              'sys_guid'
              'sys_typeid'
              'sys_xmlagg'
              'sys_xmlgen'
              'sysdate'
              'systimestamp'
              'tan'
              'tanh'
              'to_char'
              'to_clob'
              'to_date'
              'to_dsinterval'
              'to_lob'
              'to_multi_byte'
              'to_nchar'
              'to_nclob'
              'to_number'
              'to_single_byte'
              'to_timestamp'
              'to_timestamp_tz'
              'to_yminterval'
              'translate'
              'treat'
              'trim'
              'trunc'
              'tz_offset'
              'uid'
              'unistr'
              'updatexml'
              'upper'
              'user'
              'userenv'
              'using'
              'value'
              'var_pop'
              'var_samp'
              'variance'
              'vsize'
              'width_bucket'
              'xmlagg'
              'xmlcolattval'
              'xmlconcat'
              'xmlforest'
              'xmlsequence'
              'xmltransform')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Default Oracle Packages'
        StyleName = 'Default Oracle Packages'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'dbms_alert'
              'dbms_application_info'
              'dbms_aq'
              'dbms_aqadm'
              'dbms_aqelm'
              'dbms_backup_restore'
              'dbms_ddl'
              'dbms_debug'
              'dbms_defer'
              'dbms_defer_query'
              'dbms_describe'
              'dbms_distributed_trust_admin'
              'dbms_fga'
              'dbms_hs_passthrough'
              'dbms_iot'
              'dbms_job'
              'dbms_ldap'
              'dbms_libcache'
              'dbms_lob'
              'dbms_lock'
              'dbms_logmnr'
              'dbms_logmnr_cdc_publish'
              'dbms_logmnr_cdc_subscribe'
              'dbms_logmnr_d'
              'dbms_metadata'
              'dbms_mview'
              'dbms_obfuscation_toolkit'
              'dbms_odci'
              'dbms_offline_og'
              'dbms_offline_snapshot'
              'dbms_olap'
              'dbms_oracle_trace_agent'
              'dbms_oracle_trace_user'
              'dbms_outln'
              'dbms_outln_edit'
              'dbms_output'
              'dbms_pclxutil'
              'dbms_pipe'
              'dbms_profiler'
              'dbms_random'
              'dbms_rectifier_diff'
              'dbms_redefinition'
              'dbms_refresh'
              'dbms_repair'
              'dbms_repcat'
              'dbms_repcat_admin'
              'dbms_repcat_instatiate'
              'dbms_repcat_rgt'
              'dbms_reputil'
              'dbms_resource_manager'
              'dbms_resource_manager_privs'
              'dbms_resumable'
              'dbms_rls'
              'dbms_rowid'
              'dbms_session'
              'dbms_shared_pool'
              'dbms_snapshot'
              'dbms_space'
              'dbms_space_admin'
              'dbms_sql'
              'dbms_standard'
              'dbms_stats'
              'dbms_trace'
              'dbms_transaction'
              'dbms_transform'
              'dbms_tts'
              'dbms_types'
              'dbms_utility'
              'dbms_wm'
              'dbms_xmlgen'
              'dbms_xmlsave'
              'debug_extproc'
              'deleting'
              'dmbs_defer_sys'
              'dmbs_flashback'
              'dmbs_xmlquery'
              'outln_pkg'
              'plitblm'
              'raise_application_error'
              'sdo_cs'
              'sdo_geom'
              'sdo_lrs'
              'sdo_migrate'
              'sdo_tune'
              'set_transaction_use'
              'standard'
              'utl_coll'
              'utl_encode'
              'utl_file'
              'utl_http'
              'utl_inaddr'
              'utl_pg'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Predefined Exceptions'
        StyleName = 'Predefined Exceptions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access_into_null'
              'collection_is_null'
              'cursor_already_open'
              'dbms_lob.access_error'
              'dbms_lob.invalid_directory'
              'dbms_lob.noexist_directory'
              'dbms_lob.nopriv_directory'
              'dbms_lob.open_toomany'
              'dbms_lob.operation_failed'
              'dbms_lob.unopened_file'
              'dbms_sql.inconsistent_type'
              'dup_val_on_index'
              'invalid_cursor'
              'invalid_number'
              'login_denied'
              'no_data_found'
              'not_logged_on'
              'others'
              'program_error'
              'storage_error'
              'subscript_beyond_count'
              'subscript_outside_limit'
              'timeout_on_resource'
              'too_many_rows'
              'utl_file.internal_error'
              'utl_file.invalid_filehandle'
              'utl_file.invalid_mode'
              'utl_file.invalid_operation'
              'utl_file.invalid_path'
              'utl_file.read_error'
              'utl_file.write_error'
              'value_error'
              'zero_divide')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'ToadFold start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '/*startfold*/')
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = 'ToadFold end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = ' %s-1'
      end
      item
        DisplayName = 'ToadFold end'
        BlockName = 'ToadFold start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/*endfold*/')
            TokenTypes = 2
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment Start'
        BlockName = 'Comment Start'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment End'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = 'Comments...'
      end
      item
        DisplayName = 'Comment End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'constant start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'constant')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'constant end'
        NotCollapsed = True
        NameFmt = '%s1 %s-1'
        GroupFmt = 'Constants'
        HighlightPos = cpAny
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 4
        TreeGroupImage = 0
      end
      item
        DisplayName = 'constant end'
        BlockName = 'constant start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Case Start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Case End'
        BlockName = 'Case Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case Start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'if start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DML Start'
        BlockName = 'DML Start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'cursor'
              'delete'
              'insert'
              'select'
              'update    ')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DML End'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0...'
        TreeItemImage = 6
      end
      item
        DisplayName = 'DML End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DML Start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DDL Start 1'
        ConditionList = <
          item
            TagList.Strings = (
              'cluster'
              'context'
              'dimension'
              'directory'
              'index'
              'library'
              'materialized'
              'profile'
              'public'
              'role'
              'rollback'
              'sequence'
              'table'
              'tablespace'
              'unique'
              'user'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL End 1'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'DDL End 1'
        BlockName = 'DDL Start 1'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/'
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL Start 1'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'DDL Start 2'
        ConditionList = <
          item
            TagList.Strings = (
              'cluster'
              'context'
              'dimension'
              'directory'
              'index'
              'library'
              'materialized'
              'profile'
              'public'
              'role'
              'rollback'
              'sequence'
              'table'
              'tablespace'
              'unique'
              'user'
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL End 2'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3...'
      end
      item
        DisplayName = 'DDL End 2'
        BlockName = 'DDL Start 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/'
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL Start 2'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Open start'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'open')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Open end'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        CollapseFmt = '...'
      end
      item
        DisplayName = 'Open end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'Open start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'For start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'for'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'For end'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'For end'
        BlockName = 'For start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Loop start'
        StyleName = 'Current block'
        BlockName = 'For start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Loop end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function Separator'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = '()'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '( ... )'
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        BlockEnd = '('
        HighlightPos = cpAny
      end
      item
        DisplayName = 'exception start'
        ConditionList = <
          item
            TagList.Strings = (
              'exception')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'exception end'
        DisplayInTree = False
        NameFmt = '%s0 %s-2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'exception end'
        BlockName = 'exception start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Alter Start'
        ConditionList = <
          item
            TagList.Strings = (
              'alter')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Alter End'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'Alter End'
        BlockName = 'Alter Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'Alter Start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin Start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Begin End'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0...'
      end
      item
        DisplayName = 'Begin End'
        BlockName = 'Begin Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'PLSQL Start 1'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'package'
              'procedure'
              'trigger'
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'PLSQL End'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'PLSQL Start 2'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'java'
              'package'
              'procedure'
              'trigger'
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'PLSQL End'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4...'
      end
      item
        DisplayName = 'PLSQL End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Java Source Start 1'
        ConditionList = <
          item
            TagList.Strings = (
              'named')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'source')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'java')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Java Source End'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2...'
      end
      item
        DisplayName = 'Java Source Start 2'
        ConditionList = <
          item
            TagList.Strings = (
              'named')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'source')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'java')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'replace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'or')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Java Source End'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4...'
      end
      item
        DisplayName = 'Java Source End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Package Procedure Start'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1...'
      end
      item
        DisplayName = 'Package Procedure End 1'
        BlockName = 'Package Procedure Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Package Procedure Start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Package Procedure End 2'
        BlockName = 'Package Procedure Start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'if'
              'loop')
            CondType = tcNotEqual
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Package Procedure Start'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_Datatypes'
        StyleName = 'Toad_Datatypes'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserTables'
        StyleName = 'Toad_UserTables'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserViews'
        StyleName = 'Toad_UserViews'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_UserProcs'
        StyleName = 'Toad_UserProcs'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Toad_SYSViews'
        StyleName = 'Toad_SYSViews'
        BlockType = btTagDetect
        ConditionList = <>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'anon'
        Description = 'Anonymous block'
        Code.Strings = (
          'DECLARE'
          '   dummy NUMBER;'
          'BEGIN'
          '   SELECT count(*) INTO dummy FROM dual;'
          '   |;'
          'EXCEPTION'
          '   WHEN NO_DATA_FOUND THEN'
          '      NULL;'
          '   WHEN OTHERS THEN'
          '      NULL;'
          'END;')
      end
      item
        Name = 'assertloc'
        Description = 'Local Assertion Procedure with supporting DBMS_OUTPUT substitute'
        Code.Strings = (
          'DECLARE'
          '   assertion_failure EXCEPTION;'
          '   PROCEDURE pl ('
          '      str         IN   VARCHAR2,'
          '      len         IN   INTEGER := 80,'
          '      expand_in   IN   BOOLEAN := TRUE'
          '   )'
          '   IS '
          '      v_len   PLS_INTEGER     := LEAST (len, 255);'
          '      v_str   VARCHAR2 (2000);'
          '   BEGIN'
          '      IF LENGTH (str) > v_len'
          '      THEN'
          '         v_str := SUBSTR (str, 1, v_len);'
          '         DBMS_OUTPUT.put_line (v_str);'
          '         pl (SUBSTR (str, len   + 1), v_len,expand_in);'
          '      ELSE'
          '         v_str := str;'
          '         DBMS_OUTPUT.put_line (v_str);'
          '      END IF;'
          '   EXCEPTION'
          '      WHEN OTHERS'
          '      THEN'
          '         IF expand_in'
          '         THEN'
          '            DBMS_OUTPUT.ENABLE (1000000);'
          '            DBMS_OUTPUT.put_line (v_str);'
          '         ELSE'
          '            RAISE;'
          '         END IF;'
          '   END;'
          '   '
          '   PROCEDURE assert ('
          '      condition_in   IN   BOOLEAN,'
          '      msg_in         IN   VARCHAR2 := NULL'
          '   )'
          '   IS'
          '   BEGIN'
          '      IF    NOT condition_in'
          '         OR condition_in IS NULL'
          '      THEN'
          '         IF msg_in IS NOT NULL'
          '         THEN'
          '            pl (msg_in);'
          '            pl (DBMS_UTILITY.format_call_stack);'
          '         END IF;'
          ''
          '         RAISE assertion_failure;'
          '      END IF;'
          '   END;'
          'BEGIN'
          '   -- Sample usage'
          '   assert ( | my_parameter_in IS NOT NULL,'
          '      '#39'Value cannot be NULL'#39');'
          'EXCEPTION'
          '   WHEN assertion_failure  '
          '   THEN'
          '      -- Decide if you want to handle this locally or not.    '
          'END;')
      end
      item
        Name = 'autonproc'
        Description = 'Autonomous transaction PROCEDURE shell'
        Code.Strings = (
          'PROCEDURE | ()'
          'IS'
          '   -- Available in Oracle8i and above'
          '   PRAGMA AUTONOMOUS_TRANSACTION;'
          'BEGIN'
          '   -- Upon successful completion, save all changes.'
          '   COMMIT;'
          'EXCEPTION'
          '   -- For each error handler, don'#39't forget the rollback!'
          '   WHEN OTHERS '
          '   THEN'
          '      ROLLBACK;   '
          'END;')
      end
      item
        Name = 'bcquery'
        Description = 'BULK COLLECT Query'
        Code.Strings = (
          'DECLARE'
          '   l_array1 <array_type_declaration>;'
          '   l_array2 <array_type_declaration>;'
          'BEGIN'
          '   -- Fetch into individual collections, one for each'
          '   -- element in the SELECT list.'
          '   SELECT |'
          '      BULK COLLECT INTO l_array1, l_array2'
          '      FROM '
          '     WHERE ;'
          'END;')
      end
      item
        Name = 'case'
        Description = 'CASE statment'
        Code.Strings = (
          'case |'
          '   WHEN condition THEN'
          ''
          '   WHEN condition THEN'
          ''
          '   ELSE'
          ''
          'END CASE;')
      end
      item
        Name = 'crbl'
        Description = 'Entire cursor block'
        Code.Strings = (
          'DECLARE'
          '   CURSOR &c1 IS'
          '      SELECT | FROM   WHERE;'
          '   c1rec &c1%ROWTYPE;'
          'BEGIN'
          '   OPEN &c1;'
          '   LOOP'
          '      FETCH &c1 INTO c1rec;'
          '      EXIT WHEN &c1%NOTFOUND;'
          '   END LOOP;'
          '   CLOSE &c1;'
          'END;')
      end
      item
        Name = 'crbo'
        Description = 'Package body cursor'
        Code.Strings = (
          '/* declare package body */'
          'CURSOR c1 RETURN |tablename%ROWTYPE IS'
          '   SELECT ....;')
      end
      item
        Name = 'crloop'
        Description = 'Cursor LOOP'
        Code.Strings = (
          'OPEN &c1;'
          'LOOP'
          '   FETCH &c1.| INTO  ;'
          '   EXIT WHEN &c1%NOTFOUND;'
          'END LOOP;'
          'CLOSE &c1;')
      end
      item
        Name = 'crsp'
        Description = 'Package spec cursor'
        Code.Strings = (
          '/* declare package cursor specification */'
          'CURSOR c1 RETURN |tablename%ROWTYPE;')
      end
      item
        Name = 'crt'
        Description = 'CREATE TABLE AS Query'
        Code.Strings = (
          'CREATE TABLE | AS ('
          ')')
      end
      item
        Name = 'cur'
        Description = 'CURSOR declaration'
        Code.Strings = (
          'CURSOR c1 IS'
          '   SELECT | FROM table_name WHERE column_name = value;')
      end
      item
        Name = 'curfor'
        Description = 'CURSOR FOR-LOOP'
        Code.Strings = (
          'FOR c1_rec IN &c1 LOOP'
          '   |;'
          'END LOOP;')
      end
      item
        Name = 'curpar'
        Description = 'CURSOR with Parameter declaration'
        Code.Strings = (
          'CURSOR c2 (xxx NUMBER) IS'
          '   SELECT | FROM table_name WHERE column_name = xxx;')
      end
      item
        Name = 'curpfor'
        Description = 'CURSOR with Parameter FOR-LOOP'
        Code.Strings = (
          'FOR c2_rec IN c2 (yyy) LOOP'
          '   |;'
          'END LOOP;')
      end
      item
        Name = 'dolocal'
        Description = 'Local DBMS_OUTPUT Substitute'
        Code.Strings = (
          'DECLARE'
          
            '   -- Will wrap arbitrarily long strings, and automatically expa' +
            'nd  '
          '   -- the DBMS_OUTPUT buffer.'
          '   PROCEDURE pl ('
          '      str         IN   VARCHAR2,'
          '      len         IN   INTEGER := 80,'
          '      expand_in   IN   BOOLEAN := TRUE'
          '   )'
          '   IS '
          '      v_len   PLS_INTEGER     := LEAST (len, 255);'
          '      v_str   VARCHAR2 (2000);'
          '   BEGIN'
          '      IF LENGTH (str) > v_len'
          '      THEN'
          '         v_str := SUBSTR (str, 1, v_len);'
          '         DBMS_OUTPUT.put_line (v_str);'
          '         pl (SUBSTR (str, len   + 1), v_len,expand_in);'
          '      ELSE'
          '         v_str := str;'
          '         DBMS_OUTPUT.put_line (v_str);'
          '      END IF;'
          '   EXCEPTION'
          '      WHEN OTHERS'
          '      THEN'
          '         IF expand_in'
          '         THEN'
          '            DBMS_OUTPUT.ENABLE (1000000);'
          '            DBMS_OUTPUT.put_line (v_str);'
          '         ELSE'
          '            RAISE;'
          '         END IF;'
          '   END;'
          'BEGIN'
          '   |'
          'END;')
      end
      item
        Name = 'fadel'
        Description = 'FORALL Delete'
        Code.Strings = (
          'DECLARE'
          '   l_array  <array_type_declaration>;'
          'BEGIN'
          '   FORALL indx IN l_array.FIRST .. l_array.LAST'
          '      DELETE FROM |'
          '       WHERE column = l_array (indx);'
          'END;')
      end
      item
        Name = 'faexc'
        Description = 'FORALL with SAVE EXCEPTIONS error handling'
        Code.Strings = (
          'DECLARE -- Oracle9i and above!'
          '  l_array   <array_type_declaration>;'
          '  bulk_errors EXCEPTION;'
          '   PRAGMA EXCEPTION_INIT ( bulk_errors, -24381 );'
          'BEGIN    '
          '   FORALL indx IN l_array.FIRST .. l_array.LAST'
          '      SAVE EXCEPTIONS'
          '      /*DML statement of choice*/'
          #9'  |;'
          'EXCEPTION'
          '   WHEN bulk_errors '
          '   THEN '
          '      FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT'
          '      LOOP'
          '         DBMS_OUTPUT.PUT_LINE ('
          '            '#39'Error '#39' || indx || '#39' occurred during '#39' ||'
          
            '            '#39'iteration '#39' || SQL%BULK_EXCEPTIONS(indx).ERROR_INDE' +
            'X ||'
          '            '#39' updating name to '#39' ||'
          
            '                 enames_with_errors(SQL%BULK_EXCEPTIONS(indx).ER' +
            'ROR_INDEX));'
          '         DBMS_OUTPUT.PUT_LINE ('
          '            '#39'Oracle error is '#39' ||'
          '            SQLERRM(-1 * SQL%BULK_EXCEPTIONS(indx).ERROR_CODE));'
          '      END LOOP;   '
          'END;'
          '/')
      end
      item
        Name = 'fains'
        Description = 'FORALL Insert'
        Code.Strings = (
          'DECLARE'
          '   l_array1     <array_type_declaration>;'
          '   l_array2     <array_type_declaration>;'
          '   l_array3     <array_type_declaration>;'
          'BEGIN'
          '   FORALL indx IN l_array1.FIRST .. l_array1.LAST'
          '      INSERT INTO |'
          '         ( column list )'
          '         VALUES'
          '         (l_array2 (indx), l_array3 (indx) ...);'
          'END;')
      end
      item
        Name = 'faupd'
        Description = 'FORALL Update'
        Code.Strings = (
          'DECLARE'
          '   l_array1 <array_type_declaration>;'
          '   l_array2 <array_type_declaration>;'
          'BEGIN'
          '   FORALL indx IN l_array1.FIRST .. l_array1.LAST'
          '      UPDATE |'
          '         SET column = l_array2 (indx)'
          '       WHERE column = l_array1 (indx);'
          'END;')
      end
      item
        Name = 'for'
        Description = 'FOR-LOOP statement'
        Code.Strings = (
          'FOR | IN 1 .. 10 LOOP'
          ''
          'END LOOP;')
      end
      item
        Name = 'forwo'
        Description = 'Nested FOR-LOOPs with EXIT-WHEN outer'
        Code.Strings = (
          '<<outer>>'
          'FOR i IN 1 .. 10 LOOP'
          ''
          '   FOR j IN 1 .. 10 LOOP'
          ''
          '      EXIT outer WHEN |;'
          '   END LOOP;'
          'END LOOP outer;')
      end
      item
        Name = 'func'
        Description = 'FUNCTION shell'
        Code.Strings = (
          'FUNCTION | () RETURN &returntype'
          'IS'
          '  xxx &returntype;'
          'BEGIN'
          ''
          '   RETURN xxx;'
          'END;')
      end
      item
        Name = 'getline'
        Description = 'Local substitute for UTL_FILE.GET_LINE'
        Code.Strings = (
          'DECLARE'
          '   -- Trap NO_DATA_FOUND and return EOF flag.'
          '   file_id UTL_FILE.FILE_TYPE;'
          '   line VARCHAR2(32767);'
          '   eof BOOLEAN;'
          ''
          '   PROCEDURE get_nextline '
          '     (file_in IN UTL_FILE.FILE_TYPE, '
          '      line_out OUT VARCHAR2, '
          '      eof_out OUT BOOLEAN)'
          '   IS'
          '   BEGIN'
          '      UTL_FILE.GET_LINE (file_in, line_out);'
          '      eof_out := FALSE;'
          '   EXCEPTION'
          '      WHEN NO_DATA_FOUND'
          '      THEN'
          '        line_out := NULL;'
          '        eof_out  := TRUE;'
          '   END;'
          'BEGIN /* main */'
          '   file_id := UTL_FILE.FOPEN ('
          '      <location>, <filename>, max_linesize => 32767);'
          '      '
          '   LOOP'
          '      get_nextline (file_id, line, eof);'
          '      EXIT WHEN eof;'
          '      /*process line*/'
          #9'  |'
          '   END LOOP;'
          '   '
          '   UTL_FILE.FCLOSE (file_id);'
          'END;   ')
      end
      item
        Name = 'goto'
        Description = 'GOTO statment'
        Code.Strings = (
          '<<code_label>>'
          '|;'
          'goto code_label;')
      end
      item
        Name = 'ift'
        Description = 'IF-THEN statement'
        Code.Strings = (
          'IF | THEN'
          ''
          'END IF;')
      end
      item
        Name = 'ifte'
        Description = 'IF-THEN-ELSE statement'
        Code.Strings = (
          'IF | THEN'
          ''
          'ELSE'
          ''
          'END IF;')
      end
      item
        Name = 'iftei'
        Description = 'IF-THEN-ELSIF statement'
        Code.Strings = (
          'IF | THEN'
          ''
          'ELSIF condition THEN'
          ''
          'ELSE'
          ''
          'END IF;')
      end
      item
        Name = 'invproc'
        Description = 'Invoker Rights PROCEDURE shell'
        Code.Strings = (
          'PROCEDURE | ()'
          '  AUTHID CURRENT_USER'
          'IS'
          'BEGIN'
          ''
          'END;')
      end
      item
        Name = 'lp'
        Description = 'LOOP statement'
        Code.Strings = (
          'LOOP'
          '   |;'
          'END LOOP;')
      end
      item
        Name = 'lpew'
        Description = 'LOOP with EXIT-WHEN statement'
        Code.Strings = (
          'LOOP'
          '   EXIT WHEN |;'
          'END LOOP;')
      end
      item
        Name = 'lpex'
        Description = 'LOOP with EXIT statement'
        Code.Strings = (
          'LOOP'
          '   IF | THEN'
          '      EXIT;'
          '   END IF;'
          'END LOOP;')
      end
      item
        Name = 'mta'
        Description = 'MODIFY TABLE ADD'
        Code.Strings = (
          'MODIFY TABLE | ADD ('
          ')')
      end
      item
        Name = 'ndsmrq'
        Description = 'NDS multiple row query'
        Code.Strings = (
          'DECLARE'
          '   l_var VARCHAR2(32767);'
          '   TYPE refcur_t IS REF CURSOR;'
          '   l_cursor refcur_t;'
          '   l_record table%ROWTYPE; -- MODIFY TO MATCH SELECT'
          'BEGIN'
          '   OPEN l_cursor FOR '#39'SELECT | '#39';'
          '   LOOP'
          '      FETCH l_cursor INTO l_record;'
          '      EXIT WHEN l_cursor%NOTFOUND;'
          '   END LOOP;'
          '   CLOSE l_cursor;'
          'END;')
      end
      item
        Name = 'ndsplsql'
        Description = 'NDS dynamic PL/SQL block execution'
        Code.Strings = (
          'DECLARE'
          '   l_block VARCHAR2(32767) :='
          '      '#39'| '#39';'
          'BEGIN'
          '   EXECUTE IMMEDIATE '
          '      '#39'BEGIN '#39' || l_block || '#39'END;'#39
          '      INTO l_var'
          '      USING var1 IN, var2 IN OUT, var3 OUT;'
          'END;')
      end
      item
        Name = 'ndssrq'
        Description = 'NDS single row query'
        Code.Strings = (
          'DECLARE'
          '   l_var VARCHAR2(32767);'
          'BEGIN'
          '   EXECUTE IMMEDIATE '
          '      '#39'SELECT | '#39
          '      INTO l_var'
          '      USING;'
          'END;')
      end
      item
        Name = 'proc'
        Description = 'PROCEDURE shell'
        Code.Strings = (
          'PROCEDURE | ()'
          'IS'
          'BEGIN'
          ''
          'END;')
      end
      item
        Name = 'recins'
        Description = 'Record-based Insert'
        Code.Strings = (
          'DECLARE  '
          '   l_record &tablename%ROWTYPE;'
          'BEGIN'
          '   -- Available in Oracle9i Release 2 and above'
          '   INSERT INTO &tablename'
          '      VALUES l_record;'
          '   |'
          'END;')
      end
      item
        Name = 'record'
        Description = 'Sample record declaration'
        Code.Strings = (
          'TYPE |RecordName IS RECORD ('
          '  deptno  NUMBER;'
          '  deptname dept.name%TYPE );'
          'dept_rec RecordName;')
      end
      item
        Name = 'recupd'
        Description = 'Record-based Update'
        Code.Strings = (
          'DECLARE  '
          '   l_record &tablename%ROWTYPE;'
          'BEGIN'
          '   -- Available in Oracle9i Release 2 and above'
          '   UPDATE &tablename'
          '      SET ROW = l_record'
          '    WHERE |;'
          'END;')
      end
      item
        Name = 'ups'
        Description = 'UPDATE with SAVEPOINTS'
        Code.Strings = (
          'BEGIN'
          '   SAVEPOINT my_point;'
          '   UPDATE | SET ;'
          'EXCEPTION'
          '   WHEN OTHERS THEN'
          '      ROLLBACK TO my_point;'
          'END;')
      end
      item
        Name = 'utlfexc'
        Description = 'UTL_FILE exception handling'
        Code.Strings = (
          'DECLARE'
          '   fid UTL_FILE.FILE_TYPE;'
          ''
          '   PROCEDURE recNgo (str IN VARCHAR2)'
          '   IS'
          '   BEGIN'
          '      DBMS_OUTPUT.PUT_LINE (CONCAT('#39'UTL_FILE error: '#39', str));'
          '      UTL_FILE.FCLOSE (fid);'
          '   END;'
          'BEGIN'
          ''
          '    |'
          ''
          'EXCEPTION'
          '   WHEN UTL_FILE.INVALID_PATH'
          '    THEN recNgo ('#39'invalid_path'#39'); '
          '   WHEN UTL_FILE.INVALID_MODE'
          '    THEN recNgo ('#39'invalid_mode'#39');'
          '   WHEN UTL_FILE.INVALID_FILEHANDLE'
          '    THEN recNgo ('#39'invalid_filehandle'#39');'
          '   WHEN UTL_FILE.INVALID_OPERATION'
          '    THEN recNgo ('#39'invalid_operation'#39');'
          '   WHEN UTL_FILE.READ_ERROR'
          '    THEN recNgo ('#39'read_error'#39');'
          '   WHEN UTL_FILE.WRITE_ERROR'
          '    THEN recNgo ('#39'write_error'#39');'
          '   WHEN UTL_FILE.INTERNAL_ERROR'
          '    THEN recNgo ('#39'internal_error'#39');'
          '   WHEN OTHERS'
          '    THEN recNgo (SQLERRM);'
          'END;')
      end
      item
        Name = 'slct'
        Description = 'Select query'
        Code.Strings = (
          'select     *'
          'from       dual'
          ';')
      end
      item
        Name = 'vss'
        Description = 'v$session'
        Code.Strings = (
          'Select     *'
          'from       v$session'
          ';')
      end
      item
        Name = 'xxtext'
        Description = 'test '
        Code.Strings = (
          'select * '
          'from   dba_objects'
          'where  1=1'
          'and    object_name like '#39'TEST'#39
          'and    object_type in ('#39'TABLE'#39', '#39'VIEW'#39')'
          ';')
	  end
	  
    item 
    name= 'addresp'
    description =  'addresp'
    Code.Strings = (
' DECLARE'
'         '
'            CURSOR C_RESP'
'            IS'
'               SELECT fav.application_short_name,'
'                      fav.application_name,'
'                      frv.responsibility_key,'
'                      frv.responsibility_name'
'                 FROM FND_APPLICATION_VL fav, '
'                      FND_RESPONSIBILITY_VL frv'
'                WHERE frv.application_id = fav.application_id'
'       AND   (frv.responsibility_name like '#39'ELC%Receivables%Supervisor'#39' or frv.responsibility_name like '#39'ELC%Receivables%Manager'#39')'
'             order by frv.responsibility_name ;  '
'         '
'         '
'            l_user_name         VARCHAR2 (15) := '#39'RAVINDER.SAYAL'#39';'
'   l_appl_short_name   fnd_application_vl.application_short_name%TYPE;'
'   l_resp_name         FND_RESPONSIBILITY_VL.responsibility_name%TYPE;'
'   l_resp_key          FND_RESPONSIBILITY_VL.responsibility_key%TYPE;'
'         '
'--   l_description       VARCHAR2 (100) := '#39'Adding Responsibility to the user using script'#39';'
'           l_description       VARCHAR2 (100) := '#39';'
'          '
'         BEGIN'
'         '
'           FOR resp_rec IN C_RESP'
'           LOOP'
'              l_appl_short_name := resp_rec.application_short_name;'
'              l_resp_key := resp_rec.responsibility_key;'
'              l_resp_name := resp_rec.responsibility_name;'
'         '
'              BEGIN'
'                 FND_USER_PKG.ADDRESP (username         =&gt; l_user_name,'
'                              resp_app         =&gt; l_appl_short_name,'
'                                       resp_key         =&gt; l_resp_key,'
'                                       security_group   =&gt; '#39'STANDARD'#39','
'                                       description      =&gt; l_description,'
'                                       start_date       =&gt; SYSDATE,'
'                                       end_date         =&gt; NULL);'
'                 COMMIT;'
'                 DBMS_OUTPUT.put_line ('
'                       '#39'The responsibility '#39''
'                    || l_resp_name'
'                    || '#39' is added to the user '#39''
'                    || l_user_name);'
'              EXCEPTION'
'             '
'                 WHEN OTHERS'
'                 THEN'
'                    DBMS_OUTPUT.put_line ('
'                          '#39'Responsibility '#39''
'                       || l_resp_name'
'                       || '#39' IS NOT added to the user '#39''
'                       || l_user_name'
'                       || '#39' due to '#39''
'                       || SQLCODE'
'                       || '#39'; '#39''
'                       || SUBSTR (SQLERRM, 1, 250));'
'                    DBMS_OUTPUT.put_line ('#39');'
'                    ROLLBACK;'
'              END;'
'           END LOOP;'
'         END;')
end 
    
    item 
    name= 'adfp'
    description =  'adfp'
    Code.Strings = (
' SELECT   f.bug_number "BUG_NBR", a.filename "FILE_NAME",'
'         SUBSTR (c.VERSION, 1, 20) "PATCH_VERSION",'
'         SUBSTR (d.VERSION, 1, 20) "SITE_VERSION", b.executed_flag,'
'         b.creation_date "PATCH_DATE"'
'    FROM ad_files a,'
'         ad_patch_run_bug_actions b,'
'         ad_file_versions c,'
'         ad_file_versions d,'
'         ad_patch_run_bugs e,'
'         ad_bugs f'
'   WHERE a.file_id = b.file_id'
'     AND a.filename LIKE '#39'appvndrb.pls'#39''
'     AND c.file_version_id = b.patch_file_version_id'
'     AND d.file_version_id = b.onsite_file_version_id'
'     AND b.executed_flag = '#39'Y'#39''
'     AND e.bug_id = f.bug_id'
'     AND e.patch_run_bug_id = b.patch_run_bug_id'
'ORDER BY b.creation_date DESC'
';')
end 
    
    item 
    name= 'adpf'
    description =  'adpf'
    Code.Strings = (
' SELECT   f.bug_number "BUG_NBR", a.filename "FILE_NAME",'
'         SUBSTR (c.VERSION, 1, 20) "PATCH_VERSION",'
'         SUBSTR (d.VERSION, 1, 20) "SITE_VERSION", b.executed_flag,'
'         b.creation_date "PATCH_DATE"'
'FROM     ad_files a,'
'         ad_patch_run_bug_actions b,'
'         ad_file_versions c,'
'         ad_file_versions d,'
'         ad_patch_run_bugs e,'
'         ad_bugs f'
'WHERE    a.file_id = b.file_id'
'AND      c.file_version_id = b.patch_file_version_id'
'AND      d.file_version_id = b.onsite_file_version_id'
'AND      b.executed_flag = '#39'Y'#39''
'AND      e.bug_id = f.bug_id'
'AND      e.patch_run_bug_id = b.patch_run_bug_id'
'AND      f.bug_number = :Patch_number'
'ORDER BY b.creation_date DESC'
';')
end 
    
    item 
    name= 'ai'
    description =  'ai'
    Code.Strings = (
' select    haou.name,'
'         pv.segment1,'
'         pv.vendor_name,'
'         pvs.vendor_site_code,'
'         ai.invoice_num,'
'         ai.invoice_date,'
'         gcc.CONCATENATED_SEGMENTS  liability_account,'
'         ai.*,'
'         global_name, '
'         sysdate  date_qry_run,'
'         rownum'
'from      ap_invoices_all ai,'
'         po_vendors pv,'
'         po_vendor_sites_all pvs,'
'         gl_code_combinations_kfv gcc,'
'         hr_all_organization_units haou,'
'         global_name'
'where     1=1'
'and       ai.vendor_id  = pv.vendor_id'
'and       ai.vendor_site_id = pvs.vendor_site_id'
'and       ai.org_id = haou.organization_id'
'and       ai.accts_pay_code_combination_id = gcc.code_combination_id'
'--and       ai.invoice_id ='
'--and       ai.invoice_num like '
')'
';'
'')
end 
    
    item 
    name= 'aid'
    description =  'aid'
    Code.Strings = (
' select   haou.name,'
'         pv.segment1,'
'         pv.vendor_name,'
'         pvs.vendor_site_code,'
'         ai.invoice_num,'
'         ai.invoice_date,'
'         ail.line_number,'
'         ail.description, '
'         gcc.CONCATENATED_SEGMENTS  Charge_account,'
'         ail.*,'
'         aid.*          '
'from     ap_invoices_all ai,'
'         ap_invoice_lines_all ail,'
'         ap_invoice_distributions_all aid,'
'         po_vendors pv,'
'         po_vendor_sites_all pvs,'
'         gl_code_combinations_kfv gcc,'
'         hr_all_organization_units haou,'
'         global_name'
'where     1=1'
'and       ai.vendor_id  = pv.vendor_id'
'and       ai.vendor_site_id = pvs.vendor_site_id'
'and       ai.invoice_id = ail.invoice_id'
'and       ail.invoice_id = aid.invoice_id'
'and       ail.line_number = aid.invoice_line_number'
'and       ai.org_id = haou.organization_id'
'and       aid.DIST_CODE_COMBINATION_ID = gcc.code_combination_id'
'--and       ai.invoice_id = '
'--and       ai.invoice_num like '
';')
end 
    
    item 
    name= 'anon'
    description =  'anon'
    Code.Strings = (
' DECLARE'
'  dummy NUMBER;'
'BEGIN'
'  SELECT count(*) INTO dummy FROM dual;'
'  |;'
'EXCEPTION'
'  WHEN NO_DATA_FOUND THEN'
'     NULL;'
'  WHEN OTHERS THEN'
'     NULL;'
'END;')
end 
    
    item 
    name= 'assertloc'
    description =  'assertloc'
    Code.Strings = (
' DECLARE'
'    assertion_failure EXCEPTION;'
'    PROCEDURE pl ('
'       str         IN   VARCHAR2,'
'       len         IN   INTEGER := 80,'
'       expand_in   IN   BOOLEAN := TRUE'
'    )'
'    IS '
'       v_len   PLS_INTEGER     := LEAST (len, 255);'
'       v_str   VARCHAR2 (2000);'
'    BEGIN'
'       IF LENGTH (str) &gt; v_len'
'       THEN'
'          v_str := SUBSTR (str, 1, v_len);'
'          DBMS_OUTPUT.put_line (v_str);'
'          pl (SUBSTR (str, len   + 1), v_len,expand_in);'
'       ELSE'
'          v_str := str;'
'          DBMS_OUTPUT.put_line (v_str);'
'       END IF;'
'    EXCEPTION'
'       WHEN OTHERS'
'       THEN'
'          IF expand_in'
'          THEN'
'             DBMS_OUTPUT.ENABLE (1000000);'
'             DBMS_OUTPUT.put_line (v_str);'
'          ELSE'
'             RAISE;'
'          END IF;'
'    END;'
'    '
'    PROCEDURE assert ('
'       condition_in   IN   BOOLEAN,'
'       msg_in         IN   VARCHAR2 := NULL'
'    )'
'    IS'
'    BEGIN'
'       IF    NOT condition_in'
'          OR condition_in IS NULL'
'       THEN'
'          IF msg_in IS NOT NULL'
'          THEN'
'             pl (msg_in);'
'             pl (DBMS_UTILITY.format_call_stack);'
'          END IF;'
' '
'          RAISE assertion_failure;'
'       END IF;'
'    END;'
' BEGIN'
'    -- Sample usage'
'    assert ( | my_parameter_in IS NOT NULL,'
'       '#39'Value cannot be NULL'#39');'
' EXCEPTION'
'    WHEN assertion_failure  '
'    THEN'
'       -- Decide if you want to handle this locally or not.    '
' END;')
end 
    
    item 
    name= 'asyn'
    description =  'asyn'
    Code.Strings = (
' SELECT    *'
'  FROM    ALL_SYNONYMS'
' WHERE    1 = 1'
'   AND    UPPER(synonym_name) LIKE '
';')
end 
    
    item 
    name= 'autonproc'
    description =  'autonproc'
    Code.Strings = (
' PROCEDURE | ()'
'         IS'
'            -- Available in Oracle8i and above'
'            PRAGMA AUTONOMOUS_TRANSACTION;'
'         BEGIN'
'            -- Upon successful completion, save all changes.'
'            COMMIT;'
'         EXCEPTION'
'            -- For each error handler, don'#39't forget the rollback!'
'            WHEN OTHERS '
'            THEN'
'               ROLLBACK;   '
'         END;')
end 
    
    item 
    name= 'bcquery'
    description =  'bcquery'
    Code.Strings = (
' DECLARE'
'  l_array1 '#39'array_type_declaration'#39';'
'  l_array2 '#39'array_type_declaration'#39';'
'BEGIN'
'  -- Fetch into individual collections, one for each'
'  -- element in the SELECT list.'
'  SELECT |'
'     BULK COLLECT INTO l_array1, l_array2'
'     FROM '
'    WHERE ;'
'END;')
end 
    
    item 
    name= 'case'
    description =  'case'
    Code.Strings = (
' case |'
'            WHEN condition THEN'
'         '
'            WHEN condition THEN'
'         '
'            ELSE'
'         '
'         END CASE;')
end 
    
    item 
    name= 'ccdf'
    description =  'ccdf'
    Code.Strings = (
' cost_distributed_flag' 
      )
end 
    
    item 
    name= 'ccid'
    description =  'ccid'
    Code.Strings = (
' code_combination_id')
end 
    
    item 
    name= 'cctid'
    description =  'cctid'
    Code.Strings = (
' customer_trx_id')
end 
    
    item 
    name= 'cdiln'
    description =  'cdiln'
    Code.Strings = (
' draft_invoice_line_num')
end 
    
    item 
    name= 'cdin'
    description =  'cdin'
    Code.Strings = (
' draft_invoice_Num')
end 
    
    item 
    name= 'ceed'
    description =  'ceed'
    Code.Strings = (
' effective_end_date')
end 
    
    item 
    name= 'ceid'
    description =  'ceid'
    Code.Strings = (
' expenditure_id')
end 
    
    item 
    name= 'ceidt'
    description =  'ceidt'
    Code.Strings = (
' expenditure_item_date')
end 
    
    item 
    name= 'ceiid'
    description =  'ceiid'
    Code.Strings = (
' expenditure_item_id')
end 
    
    item 
    name= 'cesd'
    description =  'cesd'
    Code.Strings = (
' effective_start_date')
end 
    
    item 
    name= 'cf'
    description =  'cf'
    Code.Strings = (
' CREATE FUNCTION function_name'
'          [ (parameter) ]'
'          RETURN return_datatype'
'          IS'
'              [declaration_section]'
'          BEGIN'
'              ...'
'          END function_name;'
      )
end 
    
    item 
    name= 'cinid'
    description =  'cinid'
    Code.Strings = (
' invoice_id')
end 
    
    item 
    name= 'clag'
    description =  'clag'
    Code.Strings = (
' LISTAGG(segment1, '#39', '#39') WITHIN GROUP (ORDER BY segment1) list')
end 
    
    item 
    name= 'coid'
    description =  'coid'
    Code.Strings = (
' organization_id')
end 
    
    item 
    name= 'cp'
    description =  'cp'
    Code.Strings = (
' CREATE PROCEDURE procedure_name'
'      [ (parameter]) ]'
'      IS'
'          [declaration_section]'
'      BEGIN'
'          ...'
'      END procedure_name;'
      )
end 
    
    item 
    name= 'cpid'
    description =  'cpid'
    Code.Strings = (
' project_id')
end 
    
    item 
    name= 'cprog'
    description =  'cprog'
    Code.Strings = (
' SELECT fcpt.user_concurrent_program_name,'
'         fcp.concurrent_program_name,'
'         fe.executable_name,'
'         fe.execution_file_name,'
'         DECODE(fe.execution_method_code,'#39''
'        B'#39', '#39'Request Set Stage Function'#39','#39''
'        Q'#39', '#39'SQL*Plus'#39','#39''
'        H'#39', '#39'Host'#39','#39''
'        L'#39', '#39'SQL*Loader'#39','#39''
'        A'#39', '#39'Spawned'#39','#39''
'        I'#39', '#39'PL/SQL Stored Procedure'#39','#39''
'        P'#39', '#39'Oracle Reports'#39','#39''
'        S'#39', '#39'Immediate'#39', '#39'N/A'#39') execution_method,'
'         fa.application_name,'
'         fa.basepath'
'         FROM fnd_concurrent_programs_tl fcpt,'
'         fnd_concurrent_programs fcp,'
'         fnd_executables fe,'
'         fnd_application_vl fa'
'         WHERE 1 = 1'
'         AND fcp.concurrent_program_id = fcpt.concurrent_program_id'
'         AND fe.executable_id          = fcp.executable_id'
'         AND fcpt.language = USERENV('#39'LANG'
'AND fe.application_id = fa.application_id'
'         --AND fe.execution_file_name = '#39'TestDeepak'#39''
'         AND fcpt.user_concurrent_program_name = '#39'TestDeepak'
';		 ')
end 
    
    item 
    name= 'crbl'
    description =  'crbl'
    Code.Strings = (
' DECLARE'
'            CURSOR c1 IS'
'               SELECT | FROM   WHERE;'
'            c1rec c1%ROWTYPE;'
'         BEGIN'
'            OPEN c1;'
'            LOOP'
'               FETCH c1 INTO c1rec;'
'               EXIT WHEN c1%NOTFOUND;'
'            END LOOP;'
'            CLOSE c1;'
'         END;')
end 
    
    item 
    name= 'crbo'
    description =  'crbo'
    Code.Strings = (
' /* declare package body */'
'         CURSOR c1 RETURN |tablename%ROWTYPE IS'
'            SELECT ....;')
end 
    
    item 
    name= 'crdf'
    description =  'crdf'
    Code.Strings = (
' revenue_distributed_flag '
      )
end 
    
    item 
    name= 'cresp'
    description =  'cresp'
    Code.Strings = (
' SELECT DISTINCT frt.responsibility_name'
'                        ,frg.request_group_name'
'                        ,fat.application_name'
'                        ,fcp.concurrent_program_name'
'                        ,fcpt.user_concurrent_program_name'
'                        ,fe.executable_name'
'             FROM apps.fnd_responsibility fr,'
'                  apps.fnd_responsibility_tl frt,'
'                  apps.fnd_request_groups frg,'
'                  apps.fnd_request_group_units frgu,'
'                  apps.fnd_application_tl fat,'
'                  apps.fnd_executables fe,'
'                  apps.fnd_concurrent_programs fcp,'
'                  apps.fnd_concurrent_programs_tl fcpt'
'            WHERE frt.responsibility_id      = fr.responsibility_id'
'              AND frg.request_group_id       = fr.request_group_id'
'              AND frgu.request_group_id      = frg.request_group_id'
'              AND frg.application_id         = fat.application_id'
'              AND fcpt.concurrent_program_id = frgu.request_unit_id'
'              AND fcp.executable_id          = fe.executable_id'
'              AND fcpt.concurrent_program_id = fcp.concurrent_program_id'
'              AND fcpt.user_concurrent_program_name LIKE '#39'TestDeepak'
';')
end 
    
    item 
    name= 'crex'
    description =  'crex'
    Code.Strings = (
' REGEXP_REPLACE( ccc, '#39'['#39' || CHR (9) || CHR (10) || CHR (13)|| '#39']'#39')')
end 
    
    item 
    name= 'crloop'
    description =  'crloop'
    Code.Strings = (
' OPEN c1;'
'         LOOP'
'            FETCH c1.| INTO  ;'
'            EXIT WHEN c1%NOTFOUND;'
'         END LOOP;'
'         CLOSE c1;')
end 
    
    item 
    name= 'crsp'
    description =  'crsp'
    Code.Strings = (
' /* declare package cursor specification */'
'         CURSOR c1 RETURN |tablename%ROWTYPE;')
end 
    
    item 
    name= 'crt'
    description =  'crt'
    Code.Strings = (
' CREATE TABLE | AS ('
'         )')
end 
    
    item 
    name= 'ct'
    description =  'ct'
    Code.Strings = (
' CREATE TABLE table () '
      )
end 
    
    item 
    name= 'cur'
    description =  'cur'
    Code.Strings = (
' CURSOR c1 IS'
'            SELECT | FROM table_name WHERE column_name = value;')
end 
    
    item 
    name= 'curfor'
    description =  'curfor'
    Code.Strings = (
' FOR c1_rec IN c1 LOOP'
'            |;'
'         END LOOP;')
end 
    
    item 
    name= 'curpar'
    description =  'curpar'
    Code.Strings = (
' CURSOR c2 (xxx NUMBER) IS'
'            SELECT | FROM table_name WHERE column_name = xxx;')
end 
    
    item 
    name= 'curpfor'
    description =  'curpfor'
    Code.Strings = (
' FOR c2_rec IN c2 (yyy) LOOP'
'            |;'
'         END LOOP;')
end 
    
    item 
    name= 'dbl'
    description =  'dbl'
    Code.Strings = (
' create public database link '
'           mylink'
'         connect to '
'           remote_username'
'         identified by '
'           mypassword '
'         using '#39'myserver:1521/MYSID'
';'
      )
end 
    
    item 
    name= 'ddep'
    description =  'ddep'
    Code.Strings = (
' select     *'
'         from       dba_dependencies'
'         where      1=1'
'         --and        name like '#39''
'         and        referenced_name like '
';')
end 
    
    item 
    name= 'df'
    description =  'df'
    Code.Strings = (
' DELETE FROM table WHERE  '
      )
end 
    
    item 
    name= 'dic'
    description =  'dic'
    Code.Strings = (
' SELECT        *'
'          FROM        dba_ind_columns'
'          WHERE        1=1'
'          AND        table_name LIKE '#39'MAS_MTE_BATCH_INFO'#39''
'          AND        index_name LIKE '#39'MAS_MTE_BATCH_INFO_N1'#39''
'          ORDER BY index_name, column_position'
';')
end 
    
    item 
    name= 'didx'
    description =  'didx'
    Code.Strings = (
' SELECT       *'
'         FROM       DBA_INDEXES'
'         WHERE       1=1'
'         AND           INDEX_NAME LIKE '
';')
end 
    
    item 
    name= 'dindcol'
    description =  'dindcol'
    Code.Strings = (
' SELECT       *'
'         FROM       DBA_IND_COLUMNS'
'         WHERE       1=1'
'         AND           TABLE_NAME LIKE '
';')
end 
    
    item 
    name= 'dobj'
    description =  'dobj'
    Code.Strings = (
' SELECT       *'
'         FROM       DBA_OBJECTS'
'         WHERE       1=1'
'         AND           OBJECT_TYPE LIKE '#39'TABLE'#39''
'         AND           OBJECT_NAME LIKE '#39'PA_PROJECTS_ALL'
';')
end 
    
    item 
    name= 'dolocal'
    description =  'dolocal'
    Code.Strings = (
' DECLARE'
'   -- Will wrap arbitrarily long strings, and automatically expand  '
'            -- the DBMS_OUTPUT buffer.'
'            PROCEDURE pl ('
'               str         IN   VARCHAR2,'
'               len         IN   INTEGER := 80,'
'               expand_in   IN   BOOLEAN := TRUE'
'            )'
'            IS '
'               v_len   PLS_INTEGER     := LEAST (len, 255);'
'               v_str   VARCHAR2 (2000);'
'            BEGIN'
'               IF LENGTH (str) &gt; v_len'
'               THEN'
'                  v_str := SUBSTR (str, 1, v_len);'
'                  DBMS_OUTPUT.put_line (v_str);'
'                  pl (SUBSTR (str, len   + 1), v_len,expand_in);'
'               ELSE'
'                  v_str := str;'
'                  DBMS_OUTPUT.put_line (v_str);'
'               END IF;'
'            EXCEPTION'
'               WHEN OTHERS'
'               THEN'
'                  IF expand_in'
'                  THEN'
'                     DBMS_OUTPUT.ENABLE (1000000);'
'                     DBMS_OUTPUT.put_line (v_str);'
'                  ELSE'
'                     RAISE;'
'                  END IF;'
'            END;'
'         BEGIN'
'            |'
'         END;')
end 
    
    item 
    name= 'dopl'
    description =  'dopl'
    Code.Strings = (
' dbms_output.put_line();')
end 
    
    item 
    name= 'dseg'
    description =  'dseg'
    Code.Strings = (
' SELECT       *'
'         FROM       DBA_SEGMENTS'
'         WHERE       1=1'
'         AND           SEGMENT_NAME LIKE '
';')
end 
    
    item 
    name= 'dsrc'
    description =  'dsrc'
    Code.Strings = (
' SELECT       *'
'         FROM       DBA_SOURCE'
'         WHERE       1=1'
'         AND           OWNER LIKE '#39'APPS'#39''
'         AND           NAME  LIKE '#39'PA_PROJECTS_PKG1'
';')
end 
    
    item 
    name= 'dtbl'
    description =  'dtbl'
    Code.Strings = (
' select       *'
'          from       dba_tables'
'          where       1=1'
'          and       table_name like '#39'PA_PROJECTS_ALL'
';')
end 
    
    item 
    name= 'dtc'
    description =  'dtc'
    Code.Strings = (
' SELECT        *'
'          FROM        dba_tab_columns'
'          WHERE        1=1'
'          AND        table_name LIKE '#39'MAS_MTE_BATCH_INFO'#39''
'          ORDER BY   column_position'
';')
end 
    
    item 
    name= 'dtmf'
    description =  'dtmf'
    Code.Strings = (
' to_date('#39'20-aug-2004'#39','#39'dd-mon-yyyy'#39')')
end 
    
    item 
    name= 'extr'
    description =  'extr'
    Code.Strings = (
' global_name, '
'                   sysdate  date_qry_run,'
'                   rownum')
end 
    
    item 
    name= 'fadel'
    description =  'fadel'
    Code.Strings = (
' DECLARE'
'            l_array  '#39'array_type_declaration'#39';'
'         BEGIN'
'            FORALL indx IN l_array.FIRST .. l_array.LAST'
'               DELETE FROM |'
'                WHERE column = l_array (indx);'
'         END;')
end 
    
    item 
    name= 'faexc'
    description =  'faexc'
    Code.Strings = (
' DECLARE -- Oracle9i and above!'
'           l_array   '#39'array_type_declaration'#39';'
'           bulk_errors EXCEPTION;'
'            PRAGMA EXCEPTION_INIT ( bulk_errors, -24381 );'
'         BEGIN    '
'            FORALL indx IN l_array.FIRST .. l_array.LAST'
'               SAVE EXCEPTIONS'
'               /*DML statement of choice*/'#39''
'        #9'#39'  |;'
'         EXCEPTION'
'            WHEN bulk_errors '
'            THEN '
'               FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT'
'               LOOP'
'                  DBMS_OUTPUT.PUT_LINE ('
'                     '#39'Error '#39' || indx || '#39' occurred during '#39' ||'
'            '#39'iteration '#39' || SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX ||'
'                     '#39' updating name to '#39' ||'
'                 enames_with_errors(SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX));'
'                  DBMS_OUTPUT.PUT_LINE ('
'                     '#39'Oracle error is '#39' ||'
'                     SQLERRM(-1 * SQL%BULK_EXCEPTIONS(indx).ERROR_CODE));'
'               END LOOP;   '
'         END;'
'         /')
end 
    
    item 
    name= 'fains'
    description =  'fains'
    Code.Strings = (
' DECLARE'
'            l_array1     '#39'array_type_declaration'#39';'
'            l_array2     '#39'array_type_declaration'#39';'
'            l_array3     '#39'array_type_declaration'#39';'
'         BEGIN'
'            FORALL indx IN l_array1.FIRST .. l_array1.LAST'
'               INSERT INTO |'
'                  ( column list )'
'                  VALUES'
'                  (l_array2 (indx), l_array3 (indx) ...);'
'         END;')
end 
    
    item 
    name= 'faupd'
    description =  'faupd'
    Code.Strings = (
' DECLARE'
'            l_array1 '#39'array_type_declaration'#39';'
'            l_array2 '#39'array_type_declaration'#39';'
'         BEGIN'
'            FORALL indx IN l_array1.FIRST .. l_array1.LAST'
'               UPDATE |'
'                  SET column = l_array2 (indx)'
'                WHERE column = l_array1 (indx);'
'         END;')
end 
    
    item 
    name= 'fcpp'
    description =  'fcpp'
    Code.Strings = (
' -------------------------------------------------------------------------------'
'-- Query to find Parameters and Value Sets associated with a Concurrent Program'
'-------------------------------------------------------------------------------'
'SELECT fcpl.user_concurrent_program_name  "Concurrent Program Name",'
'                fcp.concurrent_program_name        "Program Short Name",'
'                fe.executable_name, '
'                flv2.meaning execution_method, '
'                fe.execution_file_name,'
'                fdfcuv.column_seq_num              "Column Seq #",'
'                fdfcuv.end_user_column_name        "Parameter Name",'
'                fdfcuv.form_left_prompt            "Prompt Name",'
'                fdfcuv.enabled_flag                "Enabled Flag",'
'                fdfcuv.required_flag               "Required Flag",'
'                fdfcuv.display_flag                "Display Flag",'
'                fdfcuv.flex_value_set_id           "Value Set ID",'
'                ffvs.flex_value_set_name           "Value Set Name",'
'                flv.meaning                        "Default Type",'
'                fdfcuv.default_value               "Default Value",'
'                fuc.user_name                      "CP_Update_by",'
'                fcp.last_update_date               "CP_Last_update_date",'
'                fue.user_name                      "CE_Update_by",'
'                fe.last_update_date               "CE_Last_update_date",'
'                fup.user_name                      "Param_Update_by",'
'       fdfcuv.last_update_date               "Param_Last_update_date"'
'           FROM fnd_concurrent_programs      fcp,'
'                fnd_concurrent_programs_tl   fcpl,'
'                fnd_descr_flex_col_usage_vl  fdfcuv,'
'                fnd_flex_value_sets          ffvs,'
'                fnd_lookup_values            flv,'
'                fnd_executables              fe,'
'                fnd_user                     fuc,'
'                fnd_user                     fue,'
'                fnd_user                     fup,'
'                fnd_lookup_values            flv2'
'          WHERE 1= 1'
'   and fcp.concurrent_program_id          =  fcpl.concurrent_program_id'
'            and fcp.executable_id = fe.executable_id '
'            and flv2.lookup_type = '#39'CP_EXECUTION_METHOD_CODE'#39''
'            and flv2.lookup_code = fe.execution_method_code'
'   AND fdfcuv.descriptive_flexfield_name  =  '#39'$SRS$.'#39' || fcp.concurrent_program_name'
'   AND ffvs.flex_value_set_id             =  fdfcuv.flex_value_set_id'
'            AND flv.lookup_type(+)                 =  '#39'FLEX_DEFAULT_TYPE'#39''
'            AND flv.lookup_code(+)                 =  fdfcuv.default_type'
'            AND fcpl.LANGUAGE                      =  USERENV('#39'LANG'
'AND flv.LANGUAGE(+)                    =  USERENV('#39'LANG'
'AND fdfcuv.enabled_flag                =  '#39'Y'#39''
'            and fcp.last_updated_by = fuc.user_id(+)'
'            and fe.last_updated_by = fue.user_id(+)'
'            and fdfcuv.last_updated_by = fup.user_id(+)'
'--   AND fcpl.user_concurrent_program_name  like  '#39'AAM%%Inv%%Conv%'#39'  -- {change it}'
'            and  fcp.CONCURRENT_PROGRAM_NAME like '#39'MARINVXML%'#39''
'          ORDER BY fcp.CONCURRENT_PROGRAM_NAME, fdfcuv.column_seq_num'
';')
end 
    
    item 
    name= 'FNDMSG'
    description =  'FNDMSG'
    Code.Strings = (
' SELECT fnd_message.get_string ('#39'FND'#39', '#39'AFDICT- ARG APPL'
'FROM   DUAL'
';')
end 
    
    item 
    name= 'fnr'
    description =  'fnr'
    Code.Strings = (
' SELECT       REQUEST_ID REQ_ID,ORACLE_PROCESS_ID OPID,FCR.PARENT_REQUEST_ID,'
'             DECODE(EXECUTABLE_NAME, '#39'FNDRSSUB'#39','#39'Y'#39','#39'N'#39') REQUEST_SET,'
'             NVL(FCR.DESCRIPTION, USER_CONCURRENT_PROGRAM_NAME) USER_CONCURRENT_PROGRAM_NAME,'
'             FR.RESPONSIBILITY_NAME,PHASE_CODE,STATUS_CODE ,ARGUMENT_TEXT,TO_CHAR(FLOOR((NVL(ACTUAL_COMPLETION_DATE, SYSDATE) - ACTUAL_START_DATE)*24*60)) ||'#39':'#39'||LPAD(TO_CHAR(ROUND(MOD((NVL(ACTUAL_COMPLETION_DATE, SYSDATE) - ACTUAL_START_DATE)*24*60,1)*60,2)),2,'#39'0'#39') MIN_SECS,'
'             USER_NAME,REQUEST_DATE ,ACTUAL_START_DATE, ACTUAL_COMPLETION_DATE, '
'             FCR.CONCURRENT_PROGRAM_ID,FU.USER_ID,FR.RESPONSIBILITY_ID, FCR.PROGRAM_APPLICATION_ID,'
'             FE.EXECUTABLE_NAME, FE.EXECUTION_METHOD_CODE, FE.EXECUTION_FILE_NAME,'
'             --  get_link(fcr.request_id, '#39'O'#39') OutFile_link,'
'             --  get_link(fcr.request_id, '#39'L'#39') LogFile_link,'
'             FCR.ORACLE_SESSION_ID,LOGFILE_NAME,OUTFILE_NAME,LOGFILE_NODE_NAME,OUTFILE_NODE_NAME'
'FROM         FND_CONCURRENT_REQUESTS FCR,'
'             FND_CONCURRENT_PROGRAMS_VL FCP,'
'             FND_USER FU,'
'             FND_RESPONSIBILITY_VL FR,'
'             FND_EXECUTABLES FE'
'WHERE        1=1'
'AND          FCR.RESPONSIBILITY_ID     = FR.RESPONSIBILITY_ID'
'AND          FU.USER_ID                = FCR.REQUESTED_BY'
'AND          FCP.APPLICATION_ID        = FCR.PROGRAM_APPLICATION_ID'
'AND          FCP.CONCURRENT_PROGRAM_ID = FCR.CONCURRENT_PROGRAM_ID'
'AND          FCP.EXECUTABLE_ID         = FE.EXECUTABLE_ID '
'--AND          USER_CONCURRENT_PROGRAM_NAME NOT IN ('#39'DQM Serial Sync Index Program'#39','#39'Workflow Control Queue Cleanup'#39', '#39'Workflow Background Process'#39','#39'WIP Move Transaction Manager'#39', '#39'Process transaction interface'#39','#39'OAM Applications Dashboard Collection'#39')'
'--AND          fr.RESPONSIBILITY_NAME like '#39'Cash Management Superuser'
'AND          REGEXP_LIKE (NVL(FCR.DESCRIPTION, USER_CONCURRENT_PROGRAM_NAME),'#39'(AUDIT)'#39','#39'i'#39')--Bank Statement Cashflow Creation'#39'--AAM CE Bank Statement Master Automation Program'#39'--'#39'AAM CE Bank Statement %%'#39''
'--AND          user_name LIKE '#39'SAYALR'#39''
'AND          regexp_like (USER_NAME , '#39'(80408838)|(999)'#39', '#39'i'#39')'
'--AND          actual_start_date BETWEEN TO_DATE('#39'12-FEB-2017 20:00:00'#39','#39'dd-mon-yyyy hh24:mi:ss'#39') and TO_DATE('#39'25-FEB-2017 21:00:00'#39','#39'dd-mon-yyyy hh24:mi:ss'#39')'
'--AND          status_code != '#39'C'#39''
'--AND          request_id IN (7203118)'
'--AND          PARENT_REQUEST_ID IN (6790792)'
'ORDER  BY    REQUEST_ID;')
end 
    
    item 
    name= 'fnrm'
    description =  'fnrm'
    Code.Strings = (
' SELECT USER_CONCURRENT_PROGRAM_NAME,'
'                REQUEST_ID REQ_ID,'
'                argument5 Batch, '
'                argument1 file_name, '
'                argument2 File_type, '
'                argument3 destn_path, '
'                argument4 execute,'
'                user_name,'
'                REQUEST_DATE,'
'                Status_code'
'           FROM fnd_concurrent_requests fcr,'
'                fnd_concurrent_programs_vl fcp,'
'                fnd_user fu,'
'                fnd_responsibility_vl fr,'
'                fnd_executables fe'
'         WHERE  1=1'
'            AND fcr.responsibility_id = fr.responsibility_id'
'            AND fu.user_id = fcr.requested_by'
'            AND fcp.application_id = fcr.PROGRAM_APPLICATION_ID'
'            AND fcp.CONCURRENT_PROGRAM_ID = fcr.CONCURRENT_PROGRAM_ID'
'            and fcp.executable_id = fe.executable_id '
'            and USER_CONCURRENT_PROGRAM_NAME like '#39'AAM%Mig%'#39' '
'         --   and fu.user_name like '#39'SAYALR'#39' '
'         -- batch_name'
'         and argument1 like '#39'AAM_MM_TYPE_LKP.ldt'#39'  '
'         -- File name'
'         --   and argument5 like '#39'FUJ%'#39''
'         --and argument1 like '#39''
'            ORDER  BY request_id  DESC;')
end 
    
    item 
    name= 'for'
    description =  'for'
    Code.Strings = (
' FOR | IN 1 .. 10 LOOP'
'         '
'         END LOOP;')
end 
    
    item 
    name= 'forwo'
    description =  'forwo'
    Code.Strings = (
' -- outer'
'         FOR i IN 1 .. 10 LOOP'
'         '
'            FOR j IN 1 .. 10 LOOP'
'         '
'               EXIT outer WHEN |;'
'            END LOOP;'
'         END LOOP outer;')
end 
    
    item 
    name= 'frncm'
    description =  'frncm'
    Code.Strings = (
' SELECT      a.USER_CONCURRENT_QUEUE_NAME,'
'                     a.MAX_PROCESSES,'
'            sum(decode(b.PHASE_CODE,'#39'P'#39',decode(b.STATUS_CODE,'#39'Q,1,0),0)) Pending_Standby,'
'            sum(decode(b.PHASE_CODE,'#39'P'#39',decode(b.STATUS_CODE,'#39'I,1,0),0)) Pending_Normal,'
'            sum(decode(b.PHASE_CODE,'#39'R'#39',decode(b.STATUS_CODE,'#39'R,1,0),0)) Running_Normal'
'         FROM        FND_CONCURRENT_QUEUES_VL a, '
'                     FND_CONCURRENT_WORKER_REQUESTS b'
'         where       a.concurrent_queue_id = b.concurrent_queue_id'
'         AND         b.Requested_Start_Date=SYSDATE -1'
'         GROUP BY    a.USER_CONCURRENT_QUEUE_NAME,a.MAX_PROCESSES'
';')
end 
    
    item 
    name= 'fu'
    description =  'fu'
    Code.Strings = (
' select      *'
'         from        fnd_user'
'         where       1=1'
'         --and         employee_id = 420874'
'         --and         user_name like '#39''
'         and         user_id = 4205'
';')
end 
    
    item 
    name= 'func'
    description =  'func'
    Code.Strings = (
' FUNCTION | () RETURN returntype'
'         IS'
'           xxx returntype;'
'         BEGIN'
'         '
'            RETURN xxx;'
'         END;')
end 
    
    item 
    name= 'gcc'
    description =  'gcc'
    Code.Strings = (
' SELECT      SELECT      DECODE(GL_ACCOUNT_TYPE, '#39'A'#39', '#39'BS-A'#39','#39'E'#39','#39'PL-E'#39', '#39'L'#39', '#39'BS-L'#39', '#39'O'#39', '#39'BS-O'#39', '#39'R'#39','#39'PL-R'#39') account_type,'
'            gcc. *-- segment1 |'#39'.'#39'||segment2 ||'#39'.'#39'||segment3 ||.'#39'||segment4 ||'#39'.'#39'||segment5||'#39'.'#39'||segment6'
'         FROM        gl_code_combinations_kfv gcc'
'         WHERE       1=1'
'         --AND         code_combination_id = 14918088    '
'--and         CONCATENATED_SEGMENTS = '#39'10207.0100.000001.110001.00000.00000.000000'
';')
end 
    
    item 
    name= 'getddl'
    description =  'getddl'
    Code.Strings = (
' SELECT DBMS_METADATA.GET_DDL('#39'TABLE'#39','#39'PA_PROJECTS_ALL'
'FROM   dual'
';')
end 
    
    item 
    name= 'getline'
    description =  'getline'
    Code.Strings = (
' DECLARE'
'            -- Trap NO_DATA_FOUND and return EOF flag.'
'            file_id UTL_FILE.FILE_TYPE;'
'            line VARCHAR2(32767);'
'            eof BOOLEAN;'
'         '
'            PROCEDURE get_nextline '
'              (file_in IN UTL_FILE.FILE_TYPE, '
'               line_out OUT VARCHAR2, '
'               eof_out OUT BOOLEAN)'
'            IS'
'            BEGIN'
'               UTL_FILE.GET_LINE (file_in, line_out);'
'               eof_out := FALSE;'
'            EXCEPTION'
'               WHEN NO_DATA_FOUND'
'               THEN'
'                 line_out := NULL;'
'                 eof_out  := TRUE;'
'            END;'
'         BEGIN /* main */'
'            file_id := UTL_FILE.FOPEN ('
'               {location}, {filename}, max_linesize =&gt; 32767);'
'               '
'            LOOP'
'               get_nextline (file_id, line, eof);'
'               EXIT WHEN eof;'
'               /*process line*/'#39''
'        #9'#39'  |'
'            END LOOP;'
'            '
'            UTL_FILE.FCLOSE (file_id);'
'         END;   ')
end 
    
    item 
    name= 'gn'
    description =  'gn'
    Code.Strings = (
' select   global_name'
'         from     global_name'
';')
end 
    
    item 
    name= 'goto'
    description =  'goto'
    Code.Strings = (
' -- code_label'
'         |;'
'         goto code_label;')
end 
    
    item 
    name= 'haou'
    description =  'haou'
    Code.Strings = (
' select       *'
'         from         hr_all_organization_units'
'         where        1=1'
'         --and          organization_id = 1'
'         and          name like '
';')
end 
    
    item 
    name= 'ift'
    description =  'ift'
    Code.Strings = (
' IF | THEN'
'         '
'         END IF;')
end 
    
    item 
    name= 'ifte'
    description =  'ifte'
    Code.Strings = (
' IF | THEN'
'         '
'         ELSE'
'         '
'         END IF;')
end 
    
    item 
    name= 'iftei'
    description =  'iftei'
    Code.Strings = (
' IF | THEN'
'         '
'         ELSIF condition THEN'
'         '
'         ELSE'
'         '
'         END IF;')
end 
    
    item 
    name= 'ii'
    description =  'ii'
    Code.Strings = (
' INSERT INTO table VALUES () '
      )
end 
    
    item 
    name= 'invproc'
    description =  'invproc'
    Code.Strings = (
' PROCEDURE | ()'
'           AUTHID CURRENT_USER'
'         IS'
'         BEGIN'
'         '
'         END;')
end 
    
    item 
    name= 'KillSession'
    description =  'KillSession'
    Code.Strings = (
' SELECT SID,SERIAL# '
'         FROM V$SESSION '
'         WHERE SID IN (select session_id '
'         FROM DBA_DML_LOCKS'
'         WHERE NAME = upper('#39'FND_USER'#39'))'
'         '
'         ALTER SYSTEM KILL SESSION '#39'2955,12'#39';')
end 
    
    item 
    name= 'lck'
    description =  'lck'
    Code.Strings = (
' SELECT to_char(sysdate ,'#39'YYYY-MON-DD HH24:MI:SS'#39') query_run_time_est,'
'                sys_context('#39'USERENV'#39', '#39'DB_NAME'#39') Instance,'
'                ss.sid, '
'                ss.SERIAL#,'
'                ss.audsid,'
'                ss.osuser,'
'                ss.username, '
'                obj.object_name, '
'                MODULE,'
'                machine,'
'                terminal,'
'                TO_CHAR(logon_time ,'#39'DD-MON:Hh24:MI'
'FROM   v$SESSION ss,'
'                v$locked_object lobj,'
'                dba_objects obj'
'         WHERE 1=1'
'          AND      obj.object_name LIKE '#39'MTL%%'#39'--DRAFT_INV%'#39''
'         -- and      obj.object_type='#39'TABLE'#39''
'         AND      lobj.object_id= obj.object_id         '
'         AND   ss.Sid= lobj.session_id'
'         ORDER BY object_name'
';         '
'         '
'SELECT nvl(ses.username,'#39'ORACLE PROC'#39')||'#39' ('#39'||ses.sid||'#39')'#39' USERNAME,'
'                SID,   '
'                MACHINE, '
'                REPLACE(SQL.SQL_TEXT,CHR(10),'#39') STMT, '
'                SES.LAST_CALL_ET,'
'               ltrim(to_char(floor(SES.LAST_CALL_ET/3600), '#39'09'#39')) || '#39':'
'       || ltrim(to_char(floor(mod(SES.LAST_CALL_ET, 3600)/60), 09'#39')) || '#39':'
'       || ltrim(to_char(mod(SES.LAST_CALL_ET, 60), '#39'09'#39'))    RUNT '
'           FROM V$SESSION SES,   '
'                V$SQLtext_with_newlines SQL '
'          where SES.STATUS = '#39'ACTIVE'#39''
'            and SES.USERNAME is not null'
'            and SES.SQL_ADDRESS    = SQL.ADDRESS '
'            and SES.SQL_HASH_VALUE = SQL.HASH_VALUE '
'            and Ses.AUDSID != userenv('#39'SESSIONID'#39') '
'            and   sid = 3121'
'         --and serial# = 28843'
'          order by runt desc, 1,sql.piece;'
'         ')
end 
    
    item 
    name= 'lckfr'
    description =  'lckfr'
    Code.Strings = (
' SELECT to_char(sysdate ,'#39'YYYY-MON-DD HH24:MI:SS'#39') query_run_time_est,'
'                sys_context('#39'USERENV'#39', '#39'DB_NAME'#39') Instance,'
'                ss.SERIAL#,'
'                ss.audsid,'
'                ss.osuser,'
'                ss.username, '
'                obj.object_name,'
'                DECODE(lobj.locked_mode,'
'                          1, NULL,'
'                          2, '#39'Row Share'#39','
'                          3, '#39'Row Exclusive'#39','
'                          4, '#39'Share'#39','
'                          5, '#39'Share Row Exclusive'#39','
'                          6, '#39'Exclusive'#39','
'                          '#39'None'#39''
'                         ) locked_mode,'
'                MODULE,'
'                program,'
'                action,'
'                machine,'
'                terminal,'
'                TO_CHAR(logon_time ,'#39'DD-MON-YYYY Hh24:MI:SS'#39') logon_time,'
'                fcr.REQUEST_ID REQ_ID,'
'                --ORACLE_PROCESS_ID OPID,'
'                fcr.parent_request_id,'
'       NVL(fcr.description, USER_CONCURRENT_PROGRAM_NAME) USER_CONCURRENT_PROGRAM_NAME,'
'                fr.RESPONSIBILITY_NAME,'
'                fu.user_name,'
'                fcr.REQUEST_DATE,  '
'                fcr.actual_start_date, '
'                fcr.PHASE_code ,'
'                fcr.status_code'
'         FROM   v$SESSION ss,'
'                v$locked_object lobj,'
'                all_objects obj,'
'                v$lock lk,'
'                fnd_concurrent_requests fcr,'
'                fnd_concurrent_programs_vl fcp,'
'                fnd_user fu,'
'                fnd_responsibility_vl fr'
'         WHERE 1=1'
'          and            lk.lmode &gt; 1'
'          AND          lk.SID = ss.SID'
'          AND          obj.object_id = lk.id1'
'         -- AND      obj.object_name LIKE '#39'PO%%'#39'--DRAFT_INV%'#39''
'         and      obj.object_type='#39'TABLE'#39''
'         AND      lobj.object_id= obj.object_id         '
'         AND   ss.Sid= lobj.session_id'
'         and   fcr.ORACLE_SESSION_ID  = ss.audsid'
'            AND fcr.responsibility_id = fr.responsibility_id'
'            AND fu.user_id = fcr.requested_by'
'            AND fcp.application_id = fcr.PROGRAM_APPLICATION_ID'
'            AND fcp.CONCURRENT_PROGRAM_ID = fcr.CONCURRENT_PROGRAM_ID'
'         and   fcr.request_id &gt;=4045835'
'         and  fcr.requested_by= 4205'
';')
end 
    
    item 
    name= 'lp'
    description =  'lp'
    Code.Strings = (
' LOOP'
'            |;'
'         END LOOP;')
end 
    
    item 
    name= 'lpew'
    description =  'lpew'
    Code.Strings = (
' LOOP'
'            EXIT WHEN |;'
'         END LOOP;')
end 
    
    item 
    name= 'lpex'
    description =  'lpex'
    Code.Strings = (
' LOOP'
'            IF | THEN'
'               EXIT;'
'            END IF;'
'         END LOOP;')
end 
    
    item 
    name= 'modm'
    description =  'modm'
    Code.Strings = (
' select   *'
'         from   modutl_org_def_map_all'
'         where  1=1'
'         ')
end 
    
    item 
    name= 'moum'
    description =  'moum'
    Code.Strings = (
' select    *'
'         from      modutl_operating_units_map')
end 
    
    item 
    name= 'msi'
    description =  'msi'
    Code.Strings = (
' SELECT    haou.name Item_orgn_name,'
'                   msi.segment1,'
'                   msi.*'
'         FROM      mtl_system_items_b msi,'
'                   hr_all_organization_units haou'
'         WHERE     1 = 1'
'         and       msi.organization_id = haou.organization_id'
'         --and       msi.inventory_item_id = '
'         --and       msi.segment1 like '
';')
end 
    
    item 
    name= 'mta'
    description =  'mta'
    Code.Strings = (
' MODIFY TABLE | ADD ('
'         )')
end 
    
    item 
    name= 'mydesc'
    description =  'mydesc'
    Code.Strings = (
' DECLARE'
'            v_sqlstr  varchar2(32767) := '#39'('
'                                )'#39';       -- '#39'Sql Scripts Ends here'
'            '
'            '
'            cur PLS_INTEGER := DBMS_SQL.OPEN_CURSOR;'
'            cols DBMS_SQL.desc_tab2;'
'            ncols PLS_INTEGER;'
'         BEGIN'
'            DBMS_SQL.PARSE '
'               (cur, v_sqlstr, DBMS_SQL.NATIVE);'
'            DBMS_SQL.describe_columns2 (cur, ncols, cols);'
'            FOR col_count IN 1 .. ncols'
'            LOOP'
'                  if col_count != ncols then '
'          DBMS_OUTPUT.PUT_LINE (concat(cols(col_count).col_name , '#39', '#39') );'
'               else'
'                   DBMS_OUTPUT.PUT_LINE (cols(col_count).col_name);'
'               end if;            '
'            END LOOP;'
'            DBMS_SQL.CLOSE_CURSOR (cur);'
'         END;'
'         /')
end 
    
    item 
    name= 'ndsmrq'
    description =  'ndsmrq'
    Code.Strings = (
' DECLARE'
'            l_var VARCHAR2(32767);'
'            TYPE refcur_t IS REF CURSOR;'
'            l_cursor refcur_t;'
'            l_record table%ROWTYPE; -- MODIFY TO MATCH SELECT'
'         BEGIN'
'            OPEN l_cursor FOR '#39'SELECT | '#39';'
'            LOOP'
'               FETCH l_cursor INTO l_record;'
'               EXIT WHEN l_cursor%NOTFOUND;'
'            END LOOP;'
'            CLOSE l_cursor;'
'         END;')
end 
    
    item 
    name= 'ndsplsql'
    description =  'ndsplsql'
    Code.Strings = (
' DECLARE'
'            l_block VARCHAR2(32767) :='
'               '#39'| '#39';'
'         BEGIN'
'            EXECUTE IMMEDIATE '
'               '#39'BEGIN '#39' || l_block || '#39'END;'#39''
'               INTO l_var'
'               USING var1 IN, var2 IN OUT, var3 OUT;'
'         END;')
end 
    
    item 
    name= 'ndssrq'
    description =  'ndssrq'
    Code.Strings = (
' DECLARE'
'            l_var VARCHAR2(32767);'
'         BEGIN'
'            EXECUTE IMMEDIATE '
'               '#39'SELECT | '#39''
'               INTO l_var'
'               USING;'
'         END;')
end 
    
    item 
    name= 'oehdr'
    description =  'oehdr'
    Code.Strings = (
' SELECT ORDER_NUMBER,'
'                CUSTOMER_NUMBER,'
'                SHIP_TO_ADDRESS5,'
'                INVOICE_TO_ADDRESS5,'
'                FLOW_STATUS_CODE,'
'                TAX_EXEMPT_FLAG,'
'                CREATION_DATE,'
'                CREATED_BY,'
'                HEADER_ID,'
'                sold_to,'
'                ship_to,'
'                invoice_to,'
'                oh.*'
'              --  ship_to_Customer_id,'
'               -- bill_to_customer_id'
'         FROM   OE_ORDER_HEADERS_V oh'
'         WHERE  1 = 1'
'         and    header_id &gt; 5426296'
'         and    customer_number like '#39'CAGREATN'#39''
'         and    ordered_date &gt; sysdate - 1'
';')
end 
    
    item 
    name= 'pa'
    description =  'pa'
    Code.Strings = (
' select        *'
'         from    po_agents'
'         where        1=1'
';')
end 
    
    item 
    name= 'paaf'
    description =  'paaf'
    Code.Strings = (
' select        *'
'         from    per_all_assignments_f'
'         where        1=1'
'         and person_id = '
';')
end 
    
    item 
    name= 'paf'
    description =  'paf'
    Code.Strings = (
' select        *'
'         from        PER_ASSIGNMENTS_F'
'         where        1=1'
'         and            person_id =    :person_id'
'         order by      EFFECTIVE_START_DATE       desc'
';')
end 
    
    item 
    name= 'papf'
    description =  'papf'
    Code.Strings = (
' select        *'
'         from    per_all_people_f'
'         where        1=1'
'         and person_id = '
';')
end 
    
    item 
    name= 'pccdl'
    description =  'pccdl'
    Code.Strings = (
' SELECT        *'
'         from        pa_cc_dist_lines '
'         where        1=1 '
'         --and            expenditure_item_id '
';')
end 
    
    item 
    name= 'pcdl'
    description =  'pcdl'
    Code.Strings = (
' select       *'
'         from       pa_cost_distribution_lines_all'
'         where       1=1'
';')
end 
    
    item 
    name= 'pcerdl'
    description =  'pcerdl'
    Code.Strings = (
' select        *'
'         from        PA_CUST_EVENT_RDL_ALL      '
'         where        1=1   '
';')
end 
    
    item 
    name= 'pcrdl'
    description =  'pcrdl'
    Code.Strings = (
' select       *'
'         from       pa_cust_rev_dist_lines_all'
'         where       1=1'
';')
end 
    
    item 
    name= 'pdi'
    description =  'pdi'
    Code.Strings = (
' select        *'
'         from        pa_draft_invoices_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'pdid'
    description =  'pdid'
    Code.Strings = (
' select        *'
'         from        pa_draft_invoice_details_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'pdii'
    description =  'pdii'
    Code.Strings = (
' select        *'
'         from        pa_draft_invoice_items'
'         where        1=1'
';')
end 
    
    item 
    name= 'pdr'
    description =  'pdr'
    Code.Strings = (
' select        *'
'         from        pa_draft_revenues_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'pdri'
    description =  'pdri'
    Code.Strings = (
' select        *'
'         from        pa_draft_revenue_items'
'         where        1=1'
';')
end 
    
    item 
    name= 'pe'
    description =  'pe'
    Code.Strings = (
' select        *'
'         from        pa_expenditures_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'pei'
    description =  'pei'
    Code.Strings = (
' select        *'
'         from        pa_expenditure_items_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'peiadj'
    description =  'peiadj'
    Code.Strings = (
' SELECT       *'
'         FROM       PA_EXPEND_ITEM_ADJ_ACTIVITIES'
'         WHERE       1=1'
'         AND           expenditure_item_id = 90763041'
';')
end 
    
    item 
    name= 'peicc'
    description =  'peicc'
    Code.Strings = (
' SELECT    pp.segment1, pp.project_type,  pp.CC_TAX_TASK_ID, pt.task_number,  pt.billable_flag,'
'                 pt.allow_cross_charge_flag,     '
'        pt.CC_PROCESS_LABOR_FLAG, tps1.name labor_tp_name, pt.CC_PROCESS_NL_FLAG, tps2.name nl_tp_name,             '
'                 pwt.name task_work_type, pwt1.name EI_Work_type,'
'                 ( SELECT    full_name '
'                       FROM        per_all_people_f '
'                       WHERE        1=1'
'              AND        SYSDATE BETWEEN EFFECTIVE_START_DATE AND     EFFECTIVE_END_DATE'
'              AND            pe.incurred_by_person_id = person_id '
'                     ) full_name ,'
'        pe.EXPENDITURE_CLASS_CODE, pe.EXPENDITURE_GROUP, EXPENDITURE_ITEM_DATE, EXPENDITURE_TYPE,ORIG_USER_EXP_TXN_REFERENCE, '
'                 pe.user_batch_name, '
'                 pei.BILLABLE_FLAG,QUANTITY,'
'        COST_DISTRIBUTED_FLAG, RAW_COST, RAW_COST_RATE, COST_DIST_REJECTION_CODE, CC_CROSS_CHARGE_TYPE, CC_CROSS_CHARGE_CODE,'
'                 CC_IC_PROCESSED_CODE, CC_REJECTION_CODE, '
'        haou1.name PRVDR_ORGANIZATION, haou2.name RECVR_ORGANIZATION,'
'                 haou3.name Prvdr_OU, haou4.name RECVR_OU,'
'        REVENUE_DISTRIBUTED_FLAG, RAW_REVENUE, ACCRUED_REVENUE, ACCRUAL_RATE, REV_DIST_REJECTION_CODE,  BILL_HOLD_FLAG,'
'        pei.tp_amt_type_code, BILL_RATE, BILL_AMOUNT, BILL_TRANS_BILL_AMOUNT, INV_GEN_REJECTION_CODE,'
'        ADJUSTED_EXPENDITURE_ITEM_ID, NET_ZERO_ADJUSTMENT_FLAG,    TRANSFERRED_FROM_EXP_ITEM_ID, ORIG_TRANSACTION_REFERENCE, '
'        TRANSACTION_SOURCE, SOURCE_EXPENDITURE_ITEM_ID,    SYSTEM_LINKAGE_FUNCTION,'
'        pe.incurred_by_person_id, EXPENDITURE_ITEM_ID, pei.EXPENDITURE_ID, pei.PROJECT_ID, pei.TASK_ID, '
'        pei.CC_prvdr_organization_id, pei.CC_RECVR_ORGANIZATION_ID, '
'                 pei.org_id, pei.recvr_org_id,'
'                 pe.creation_date,'
'                 pei.last_update_date        '
'         FROM        pa_expenditure_items_all pei,'
'                     pa_projects_all  pp,'
'                     pa_expenditures_all pe,'
'                     pa_tasks pt,'
'                     pa_work_types_vl pwt, '
'                     pa_work_types_vl pwt1,'
'                     PA_CC_TP_SCHEDULES_bg tps1,'
'                     PA_CC_TP_SCHEDULES_bg tps2,'
'                     hr_all_organization_units haou1,'
'                     hr_all_organization_units haou2,'
'                     hr_all_organization_units haou3,'
'                     hr_all_organization_units haou4'
'         WHERE        1=1           '
'         AND            pp.project_id = pei.project_id'
'         AND            pei.expenditure_id = pe.expenditure_id'
'         AND            pei.task_id = pt.task_id'
'         AND            pt.work_type_id = pwt.work_type_id(+)'
'         AND            pei.work_type_id = pwt1.work_type_id(+)'
'AND            pei.cc_prvdr_ORGANIZATION_id = haou1.organization_id(+)'
'AND            pei.cc_RECVR_ORGANIZATION_id = haou2.organization_id(+)'
'         AND            pei.ORG_id = haou3.organization_id'
'         AND            pei.RECVR_ORG_id = haou4.organization_id'
'         AND            tps1.TP_SCHEDULE_id(+) = pt.LABOR_TP_SCHEDULE_ID '
'         AND            tps2.TP_SCHEDULE_id(+) = pt.NL_TP_SCHEDULE_ID'
'         AND            NET_ZERO_ADJUSTMENT_FLAG = '#39'N'#39''
'          AND            CC_CROSS_CHARGE_TYPE = '#39'IC'
' AND        (    CC_CROSS_CHARGE_CODE = '#39'N'#39'  )--OR ( CC_CROSS_CHARGE_CODE = '#39'I'#39' AND  cc_ic_processed_code = '#39'N'#39' )) '
'         -- and            pp.project_type like '#39'TM'#39''
'         -- and            cc_ic_processed_code = '#39'N'#39'      '
'          AND            recvr_org_id = 28'
'          AND            pei.org_id = 1080546'
'AND            expenditure_item_date BETWEEN TO_DATE('#39'25-dec-2004'#39','#39'dd-mon-yyyy'#39') AND TO_DATE('#39'31-Mar-2005'#39','#39'dd-mon-yyyy'#39')  '
'--AND            expenditure_item_date BETWEEN TO_DATE('#39'01-oct-2004'#39','#39'dd-mon-yyyy'#39') AND TO_DATE('#39'24-dec-2004'#39','#39'dd-mon-yyyy'
'--AND            expenditure_item_date BETWEEN TO_DATE('#39'25-Jun-2004'#39','#39'dd-mon-yyyy'#39') AND TO_DATE('#39'30-sep-2004'#39','#39'dd-mon-yyyy'#39')'
';')
end 
    
    item 
    name= 'peiccn'
    description =  'peiccn'
    Code.Strings = (
' SELECT      haou4.name RECVR_OU,pp.segment1, pp.project_type,  pp.CC_TAX_TASK_ID, pt.task_number,  pt.billable_flag,'
'                     pt.allow_cross_charge_flag,       '
'            pt.CC_PROCESS_LABOR_FLAG, tps1.name labor_tp_name, pt.CC_PROCESS_NL_FLAG, tps2.name nl_tp_name,             '
'                     pwt.name task_work_type, pwt1.name EI_Work_type,'
'            ( SELECT      concat(concat(full_name,chr(9)), EMPLOYEE_NUMBER)'
'                             FROM            per_all_people_f '
'                             WHERE            1=1'
'                    AND            SYSDATE BETWEEN EFFECTIVE_START_DATE AND       EFFECTIVE_END_DATE'
'                    AND                  pe.incurred_by_person_id = person_id '
'                     ) "Employee Name      PRN",'
'            EXPENDITURE_ITEM_DATE, EXPENDITURE_TYPE,      QUANTITY,pei.BILLABLE_FLAG,'
'            COST_DISTRIBUTED_FLAG, COST_DIST_REJECTION_CODE, RAW_COST, RAW_COST_RATE, '
'                     CC_CROSS_CHARGE_TYPE, CC_CROSS_CHARGE_CODE,'
'            CC_IC_PROCESSED_CODE, cc_bl_distributed_code, CC_REJECTION_CODE,pei.tp_amt_type_code,'
'                     pj.name, pei.job_id,  '
'            haou1.name PRVDR_ORGANIZATION, haou2.name RECVR_ORGANIZATION,'
'                     haou3.name Prvdr_OU, '
'            NET_ZERO_ADJUSTMENT_FLAG, ADJUSTED_EXPENDITURE_ITEM_ID,       TRANSFERRED_FROM_EXP_ITEM_ID, ORIG_TRANSACTION_REFERENCE, '
'            TRANSACTION_SOURCE, SOURCE_EXPENDITURE_ITEM_ID,      SYSTEM_LINKAGE_FUNCTION,'
'            pe.incurred_by_person_id, pe.INCURRED_BY_ORGANIZATION_ID, EXPENDITURE_ITEM_ID, pei.EXPENDITURE_ID, pei.PROJECT_ID, pei.TASK_ID, '
'            pei.CC_prvdr_organization_id, pei.CC_RECVR_ORGANIZATION_ID, '
'                     pei.org_id, pei.recvr_org_id,'
'            pei.BILLABLE_FLAG,REVENUE_DISTRIBUTED_FLAG, REV_DIST_REJECTION_CODE,  ACCRUAL_RATE, RAW_REVENUE, ACCRUED_REVENUE, BILL_HOLD_FLAG,'
'            BILL_RATE, BILL_AMOUNT, BILL_TRANS_BILL_AMOUNT, INV_GEN_REJECTION_CODE,'
'            pe.EXPENDITURE_CLASS_CODE, pe.EXPENDITURE_GROUP, ORIG_USER_EXP_TXN_REFERENCE, '
'                     pe.user_batch_name,'
'                     pe.creation_date,'
'                     pei.last_update_date '
'         FROM        pa_expenditure_items_all pei,'
'                     pa_projects_all  pp,'
'                     pa_expenditures_all pe,'
'                     pa_tasks pt,'
'                     pa_work_types_vl pwt, '
'                     pa_work_types_vl pwt1,'
'                     PA_CC_TP_SCHEDULES_bg tps1,'
'                     PA_CC_TP_SCHEDULES_bg tps2,'
'                     hr_all_organization_units haou1,'
'                     hr_all_organization_units haou2,'
'                     hr_all_organization_units haou3,'
'                     hr_all_organization_units haou4,'
'                     per_jobs pj'
'         WHERE       1=1               '
'         and         pei.job_id = pj.job_id'
'         AND         pp.project_id = pei.project_id'
'         AND         pei.expenditure_id = pe.expenditure_id'
'         AND         pei.task_id = pt.task_id'
'         AND         pt.work_type_id = pwt.work_type_id(+)'
'         AND         pei.work_type_id = pwt1.work_type_id(+)'
'AND         pei.cc_prvdr_ORGANIZATION_id = haou1.organization_id(+)'
'AND         pei.cc_RECVR_ORGANIZATION_id = haou2.organization_id(+)'
'         AND         pei.ORG_id = haou3.organization_id'
'         AND         pei.RECVR_ORG_id = haou4.organization_id'
'         AND         tps1.TP_SCHEDULE_id(+) = pt.LABOR_TP_SCHEDULE_ID '
'         AND         tps2.TP_SCHEDULE_id(+) = pt.NL_TP_SCHEDULE_ID'
'         AND         NET_ZERO_ADJUSTMENT_FLAG = '#39'N'#39''
'         --and         pei.cost_distributed_flag like '#39'N'#39''
'         --and         pp.segment1 like '#39'300115709'#39''
'         AND         CC_CROSS_CHARGE_TYPE = '#39'IC'#39''
'         AND         ( (CC_CROSS_CHARGE_CODE = '#39'N'#39'  ) '
'                       OR (   CC_CROSS_CHARGE_CODE = '#39'I'#39' '
'                              AND  cc_ic_processed_code = '#39'N'#39' '
'                       and  (   (    pei.TP_AMT_TYPE_CODE  not like '#39'COST_TRANSFER'
'                                   or  pei.TP_AMT_TYPE_CODE  is null )'
'                                        or pp.cc_tax_task_id is null)'
'                           )'
'                     )'
'         AND         recvr_org_id !=1080546'
'         AND         pei.org_id = 1080546'
'AND                  expenditure_item_date BETWEEN TO_DATE('#39'01-jun-2004'#39','#39'dd-mon-yyyy'#39') AND TO_DATE('#39'24-aug-2004'#39','#39'dd-mon-yyyy'#39')'
';')
end 
    
    item 
    name= 'peid'
    description =  'peid'
    Code.Strings = (
' select        *'
'         from        pa_ei_denorm'
'         where        1=1'
';')
end 
    
    item 
    name= 'pein'
    description =  'pein'
    Code.Strings = (
' SELECT    pp.segment1, pp.project_type,  pt.task_number,  pt.billable_flag,             '
'                 ( SELECT    full_name '
'                       FROM        per_all_people_f '
'                       WHERE        1=1'
'              AND        SYSDATE BETWEEN EFFECTIVE_START_DATE AND     EFFECTIVE_END_DATE'
'              AND            pe.incurred_by_person_id = person_id '
'                     ) full_name ,'
'        pe.EXPENDITURE_CLASS_CODE, pe.EXPENDITURE_GROUP, EXPENDITURE_ITEM_DATE, EXPENDITURE_TYPE,ORIG_USER_EXP_TXN_REFERENCE, '
'                 pe.user_batch_name, '
'                 pei.BILLABLE_FLAG,QUANTITY, pc.expenditure_comment,'
'        COST_DISTRIBUTED_FLAG, RAW_COST, RAW_COST_RATE, COST_DIST_REJECTION_CODE, '
'        haou1.name PRVDR_ORGANIZATION, haou2.name RECVR_ORGANIZATION,'
'                 haou3.name Prvdr_OU, haou4.name RECVR_OU,'
'        REVENUE_DISTRIBUTED_FLAG, RAW_REVENUE, ACCRUED_REVENUE, ACCRUAL_RATE, REV_DIST_REJECTION_CODE,  BILL_HOLD_FLAG,'
'        pei.tp_amt_type_code, BILL_RATE, BILL_AMOUNT, BILL_TRANS_BILL_AMOUNT, INV_GEN_REJECTION_CODE,'
'        ADJUSTED_EXPENDITURE_ITEM_ID, NET_ZERO_ADJUSTMENT_FLAG,    TRANSFERRED_FROM_EXP_ITEM_ID, ORIG_TRANSACTION_REFERENCE, '
'        TRANSACTION_SOURCE, SOURCE_EXPENDITURE_ITEM_ID,    SYSTEM_LINKAGE_FUNCTION,'
'        pe.incurred_by_person_id, pei.EXPENDITURE_ID, pei.PROJECT_ID, pei.TASK_ID, '
'        pei.CC_prvdr_organization_id, pei.CC_RECVR_ORGANIZATION_ID, '
'                 pei.org_id, pei.recvr_org_id,'
'                 pe.creation_date,'
'                 pei.last_update_date        '
'         FROM        pa_expenditure_items_all pei,'
'                     pa_projects_all  pp,'
'                     pa_expenditures_all pe,'
'                     pa_tasks pt,'
'                     hr_all_organization_units haou1,'
'                     hr_all_organization_units haou2,'
'                     hr_all_organization_units haou3,'
'                     hr_all_organization_units haou4,'
'                     pa_expenditure_comments pc'
'         WHERE        1=1           '
'         AND            pp.project_id = pei.project_id'
'         AND            pei.expenditure_id = pe.expenditure_id'
'         AND            pei.task_id = pt.task_id'
'AND            pei.cc_prvdr_ORGANIZATION_id = haou1.organization_id(+)'
'AND            pei.cc_RECVR_ORGANIZATION_id = haou2.organization_id(+)'
'         AND            pei.ORG_id = haou3.organization_id'
'         AND            pei.RECVR_ORG_id = haou4.organization_id'
'and            pei.expenditure_item_id = pc.expenditure_item_id(+)'
'         AND            NET_ZERO_ADJUSTMENT_FLAG = '#39'N'#39''
'         --AND            pei.cost_distributed_flag LIKE '#39'N'#39''
'         and            pei.billable_flag = '#39'N'#39''
'         --AND            pei.org_id = 4'
'         AND            pp.segment1 IN ( '#39'212386'
'--AND            pe.incurred_by_person_id = 17221'
'--AND            expenditure_item_date BETWEEN TO_DATE('#39'01-jun-2006'#39','#39'dd-mon-yyyy'#39') AND TO_DATE('#39'9-jun-2006'#39','#39'dd-mon-yyyy'
'ORDER BY pp.segment1;'
';')
end 
    
    item 
    name= 'peirel'
    description =  'peirel'
    Code.Strings = (
' select    level, rpad('#39'|'#39',(level-1)*4,'#39'-'#39') ||to_char(pei_v.expenditure_item_id) exp_item_id, '
'                 pei_v.expenditure_item_id, '
'                 pei_v.expenditure_id, '
'                 (select        /* no_merge(pt)     */ '
'                             task_number '
'                  from        pa_tasks pt '
'                  where        1=1 '
'                  and        pt.task_id = pei_v.task_id) task_name , '
'                 related_exp, '
'                 typ_exp, '
'                 cost_distributed_flag cdf, '
'                 revenue_distributed_flag rdf, '
'                 quantity, '
'                 expenditure_item_date, '
'                 CC_CROSS_CHARGE_TYPE, '
'                   CC_CROSS_CHARGE_code, '
'                 pei_v.creation_date '
'         from '
'                 ( '
'                         select     expenditure_item_id , '
'                                  expenditure_item_date, '
'                                  expenditure_id, '
'                                  quantity, '
'                         decode(TRANSFERRED_FROM_EXP_ITEM_ID,null,null,'#39'T'#39') typ_exp, '
'                         TRANSFERRED_FROM_EXP_ITEM_ID  related_exp, '
'                                  cost_distributed_flag , '
'                                  revenue_distributed_flag , '
'                                  creation_date, '
'                                  task_id, '
'                                  CC_CROSS_CHARGE_TYPE, '
'                                  CC_CROSS_CHARGE_code '
'                         from     pa_expenditure_items_all '
'                         where     1=1 '
'                and         expenditure_item_id in (86225832, 86225833, 86535746, 86535747, 86535748, 86669086, 86669087, 86669088, 86669089, 86669092, 86669093, 86669094, 86669095, 86669096, 86669097, 86875330, 86875338, 86875344, 86875346, 86875350, 86875351, 86875352, 86875353, 86875354, 86875355, 86875356, 86875357, 86875358, 86875359, 86875360, 86875361, 86875362, 86875363, 86875364, 86875365, 86875366, 86875367, 86875368, 86875369, 86875370, 87163191, 87163192, 87163193, 87163194, 87163195, 87163196, 87163197, 87163198, 87163199, 87163200, 87163201, 87163202, 87163203, 87163204, 87163205, 87163206, 87163207, 87163208, 87163209, 87163210, 87163211, 87163212, 87163213, 87163214, 87163215, 87163216, 87163217, 87163218, 87163219, 87163220, 87163221, 87163222, 87163223, 87163224, 87163225, 87163226, 87163227, 87163228, 87163229, 87163230, 87163231, 87163232, 87225022, 87225023, 87225024, 87225025, 87225026, 87225027, 87225028, 87225029, 87525154, 87525155, 87525156, 87525157, 87525158, 87525159, 87525160, 87525161, 87525162, 87525163, 87525164, 87525165, 87525166, 87525167, 87525168, 87525169, 87525170, 87525171, 87525172, 87525173, 87525174, 87525175, 87525176, 87525177, 87525178, 87525179, 87525180, 87525181, 87525182, 87525183, 87525184, 87525185, 87525186, 87525187, 87525188, 87525189, 87525190, 87525191, 87525192, 87525193, 87525194, 87525195, 87525240, 87525241, 87525242, 87525243, 87525244, 87525245, 87525246, 87525247) '
'                         union '
'                         select     expenditure_item_id , '
'                                  expenditure_item_date, '
'                                  expenditure_id, '
'                                  quantity, '
'                         decode(ADJUSTED_EXPENDITURE_ITEM_ID  ,null,null,'#39'A'#39') typ_exp, '
'                         ADJUSTED_EXPENDITURE_ITEM_ID  related_exp, '
'                                  cost_distributed_flag , '
'                                  revenue_distributed_flag , '
'                                  creation_date, '
'                                  task_id, '
'                                  CC_CROSS_CHARGE_TYPE, '
'                                  CC_CROSS_CHARGE_code '
'                         from     pa_expenditure_items_all '
'                         where     1=1 '
'                and         expenditure_item_id in (86225832, 86225833, 86535746, 86535747, 86535748, 86669086, 86669087, 86669088, 86669089, 86669092, 86669093, 86669094, 86669095, 86669096, 86669097, 86875330, 86875338, 86875344, 86875346, 86875350, 86875351, 86875352, 86875353, 86875354, 86875355, 86875356, 86875357, 86875358, 86875359, 86875360, 86875361, 86875362, 86875363, 86875364, 86875365, 86875366, 86875367, 86875368, 86875369, 86875370, 87163191, 87163192, 87163193, 87163194, 87163195, 87163196, 87163197, 87163198, 87163199, 87163200, 87163201, 87163202, 87163203, 87163204, 87163205, 87163206, 87163207, 87163208, 87163209, 87163210, 87163211, 87163212, 87163213, 87163214, 87163215, 87163216, 87163217, 87163218, 87163219, 87163220, 87163221, 87163222, 87163223, 87163224, 87163225, 87163226, 87163227, 87163228, 87163229, 87163230, 87163231, 87163232, 87225022, 87225023, 87225024, 87225025, 87225026, 87225027, 87225028, 87225029, 87525154, 87525155, 87525156, 87525157, 87525158, 87525159, 87525160, 87525161, 87525162, 87525163, 87525164, 87525165, 87525166, 87525167, 87525168, 87525169, 87525170, 87525171, 87525172, 87525173, 87525174, 87525175, 87525176, 87525177, 87525178, 87525179, 87525180, 87525181, 87525182, 87525183, 87525184, 87525185, 87525186, 87525187, 87525188, 87525189, 87525190, 87525191, 87525192, 87525193, 87525194, 87525195, 87525240, 87525241, 87525242, 87525243, 87525244, 87525245, 87525246, 87525247) '
'                 )        pei_v , '
'                 pa_expenditures_all pe '
'         where        pe.expenditure_id = pei_v.expenditure_id '
'connect by prior     pei_v.expenditure_item_id = pei_v.related_exp '
'         start with  related_exp is null'
';')
end 
    
    item 
    name= 'pepei'
    description =  'pepei'
    Code.Strings = (
' select        pe.*'
'         from        pa_expenditures pe,'
'                     pa_expenditure_items pei'
'         where        1=1 '
'         and            pe.expenditure_id = pei.expenditure_id'
'         --and            pei.project_id ='
';')
end 
    
    item 
    name= 'pi'
    description =  'pi'
    Code.Strings = (
' select        *'
'         from        pa_implementations'
'         where        1=1    '
';')
end 
    
    item 
    name= 'podtl'
    description =  'podtl'
    Code.Strings = (
' SELECT * '
'         FROM PO_LINES_ALL'
'         WHERE 1 = 1'
'         AND PO_HEADER_ID LIKE 101956'
';')
end 
    
    item 
    name= 'poh'
    description =  'poh'
    Code.Strings = (
' SELECT    haou.name operating_unit, '
'                   poh.segment1,'
'                   poh.document_number,'
'                   pv.vendor_number,'
'                   pv.vendor_name,'
'                   pvs.site_name,'
'                   poh.*,'
'                   global_name,'
'                   sysdate date_qry_run,'
'                   rownum'
'         FROM      po_headers_all poh,'
'                   hr_all_organization_units haou,'
'                   po_vendors pv,'
'                   po_vendor_sites_all pvs,'
'                   global_name          '
'         WHERE     1 = 1'
'         and       poh.org_id = haou.organization_id'
'         and       poh.vendor_id = pv.vendor_id,'
'         and       poh.vendor_site_id = pvs.vendor_site_id'
'         --and       po_header_id = 702180'
';')
end 
    
    item 
    name= 'pohdr'
    description =  'pohdr'
    Code.Strings = (
' SELECT * '
'         FROM PO_HEADERS_ALL'
'         WHERE 1 = 1'
'         AND SEGMENT1 LIKE 98256'
';')
end 
    
    item 
    name= 'pol'
    description =  'pol'
    Code.Strings = (
' SELECT    haou.name operating_unit, '
'                   poh.segment1,'
'                   poh.document_number,'
'                   pv.vendor_number,'
'                   pv.vendor_name,'
'                   pvs.site_name,'
'                   -- buyer_name'
'                   -- date of po'
'                   -- m'
'                   pol.*,'
'                   global_name,'
'                   sysdate date_qry_run,'
'                   rownum'
'         FROM      po_headers_all poh,'
'                   hr_all_organization_units haou,'
'                   po_vendors pv,'
'                   po_vendor_sites_all pvs,'
'                   po_lines_all,'
'                   mtl_system_items_b msi'
'                   global_name          '
'         WHERE     1 = 1'
'         and       poh.org_id = haou.organization_id'
'         and       poh.vendor_id = pv.vendor_id,'
'         and       poh.vendor_site_id = pvs.vendor_site_id'
'         and       poh.po_header_id = pol.po_header_id'
'         and       pol.inventory_item_id = msi.inventory_item_id'
'         and       pol.organization_id = msi.organization_id'
'         --and       po_header_id = 702180'
';')
end 
    
    item 
    name= 'pp'
    description =  'pp'
    Code.Strings = (
' SELECT        *'
'         FROM        pa_projects_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'ppa'
    description =  'ppa'
    Code.Strings = (
' SELECT pp1.segment1, pp1.project_status_code'
'           FROM pa_projects_all@r11erp3 pp1,'
'                pa_projects_all pp2,'
'                pa_project_types_all@r11erp3 ppt'
'          WHERE 1 = 1'
'          and   pp1.project_id = pp2.project_id'
'          and   pp1.project_type = ppt.project_type'
'          and   pp1.org_id = ppt.org_id'
' and   pp1.org_id in (select r11_ou_id from modutl_operating_units_map)'
'         -- and   ppt.project_type_class_code like '#39'INDIRECT'#39''
'           and   ppt.project_type_class_code like '#39'CAPITAL'
';')
end 
    
    item 
    name= 'ppal'
    description =  'ppal'
    Code.Strings = (
' SELECT *'
'           FROM pa_project_assets_all'
'          WHERE 1 = 1                '
';          '
'         SELECT *'
'           FROM PA_PROJECT_ASSET_LINES_ALL@r11erp3'
'          WHERE 1 = 1'
'          and org_id = 0'
';')
end 
    
    item 
    name= 'ppiv'
    description =  'ppiv'
    Code.Strings = (
' SELECT    *'
'         FROM      PA_PROJ_INVOICE_VIEW'
'         WHERE      1=1'
'         AND          PROJECT_NUMBER LIKE '#39'EG-50014'
';')
end 
    
    item 
    name= 'prax'
    description =  'prax'
    Code.Strings = (
' select       * '
'         from       per_assignments_x '
'         where       1=1 '
'         --and           person_id = 166002'
';')
end 
    
    item 
    name= 'proc'
    description =  'proc'
    Code.Strings = (
' PROCEDURE | ()'
'         IS'
'         BEGIN'
'         '
'         END;')
end 
    
    item 
    name= 'proj'
    description =  'proj'
    Code.Strings = (
' SELECT * '
'         FROM MAS_EFI_CLLI_PROJ_T_NEW'
'         WHERE 1 = 1 '
'         AND ORACLE_PROJECT LIKE '#39'CO-40120A-ENG'#39''
'         ORDER BY CLLI')
end 
    
    item 
    name= 'prpf'
    description =  'prpf'
    Code.Strings = (
' select   *'
'         from     per_all_people_f '
'         where    1=1'
'         and      person_id = 886318071'
';')
end 
    
    item 
    name= 'prptux'
    description =  'prptux'
    Code.Strings = (
' select      *'
'         from        per_person_type_usages_x '
'         where       1=1 '
'         --and         person_id in ( 166002)'
';')
end 
    
    item 
    name= 'prpx'
    description =  'prpx'
    Code.Strings = (
' select        * '
'         from        per_people_x '
'         where        1=1'
';')
end 
    
    item 
    name= 'pt'
    description =  'pt'
    Code.Strings = (
' select      *'
'         from        pa_tasks'
'         where       1=1'
';')
end 
    
    item 
    name= 'ptc'
    description =  'ptc'
    Code.Strings = (
' select        *'
'         from        pa_transaction_controls'
'         where        1=1'
';')
end 
    
    item 
    name= 'ptpp'
    description =  'ptpp'
    Code.Strings = (
' SELECT        LEVEL, pt.segment1 project, '
'            CONCAT(RPAD('#39' '#39',3*(LEVEL-1),'#39' '#39') , pt.task_number) TASK,'
'                     pt.chargeable_flag CF, '
'                     pt.BILLABLE_FLAG BF, '
'                     pt.LIMIT_TO_TXN_CONTROLS_FLAG LTF, '
'                     pt.START_DATE, '
'                     pt.completion_date,'
'                     pt.project_id,'
'                     pt.TASK_ID,'
'                     pt.CREATED_BY             '
'FROM        (SELECT pp.segment1, pt1.* FROM pa_tasks pt1, pa_projects_all pp'
'                      WHERE  pp.project_id = pt1.project_id'
'                      AND    pp.segment1 LIKE  '#39'CGS-1220-060310'#39''
'                      ORDER BY task_number) pt '
'         WHERE        1=1'
'         CONNECT    BY  PRIOR  pt.task_id = pt.parent_task_id'
'         START WITH  pt.parent_task_id IS NULL'
';')
end 
    
    item 
    name= 'qry_sess'
    description =  'qry_sess'
    Code.Strings = (
' -- queries run by a session'
'         SELECT    *'
'         FROM      v$session'
'         WHERE     1 = 1'
'         and    logon_time &gt; sysdate - 0.1'
'         and     client_identifier like '#39'AAM_CONV%'#39''
'         --and    program like '#39'JDBC Thin Client%'#39''
'		;'
'         '
'         SELECT t.*'
'           FROM v$open_cursor c'
'           JOIN v$sqltext t ON c.hash_value = t.hash_value'
'                           AND c.address = t.address'
'          WHERE sid =  1525--, 1545'
'          ORDER BY t.hash_value, t.piece'
'		  ;'
      )
end 
    
    item 
    name= 'raila'
    description =  'raila'
    Code.Strings = (
' SELECT    sysdate date_qry_run,'
'                   rail.creation_date,'
'                   hou.name ORG_NAME,'
'                   (SELECT customer_name '
'                    FROM ra_customers'
'                    WHERE 1 = 1'
'           and customer_id = orig_system_bill_customer_id) customer,'
'                   rail.interface_line_id,'
'                   rail.interface_status,'
'                   rail.batch_source_name,       '
'                   interface_line_attribute2 order_type,'
'                   rail.sales_order ,'
'                   rail.sales_order_date, '
'                   rail.sales_order_line,'
'                   rail.amount,'
'                   rail.tax_code,'
'                   rail.tax_rate,'
'                   rail.vat_tax_id, '
'          case when err.interface_line_id is null  then '#39'No'#39' else '#39'Yes'#39' end LINE_IN_ERROR, '
'                   err.message_text, '
'                   err.invalid_value, '
'                   rail.INTERFACE_LINE_CONTEXT,'
'                   interface_line_attribute1,'
'                   interface_line_attribute3,'
'                   interface_line_attribute4,'
'                   interface_line_attribute5,'
'                   interface_line_attribute6,'
'                   interface_line_attribute7,'
'                   interface_line_attribute8,'
'                   interface_line_attribute9,'
'                   rail.term_id, '
'                   rail.orig_system_bill_customer_id, --used for VAT '
'                   rail.orig_system_bill_address_id,  --used for VAT '
'                   rail.orig_system_ship_customer_id ,'
'                   rail.orig_system_ship_address_id ,'
'                   rail.orig_system_sold_customer_id, '
'                   rail.ship_date_actual ,'
'                   rail.inventory_item_id, '
'                   rail.DESCRIPTION,'
'                   rail.tax_code ,'
'                   rail.tax_rate ,'
'                   rail.vat_tax_id ,'
'                   rail.warehouse_id ,'
'                   rail.interface_line_attribute1 SALES_ORDER2, '
'                   rail.attribute14 PO_NUMBER ,'
'                   rail.attribute15 SALES_REP_ID '
'         --        ,rail.*'
'         FROM      ra_interface_lines_all rail, '
'                   ra_interface_errors_all err, '
'                   hr_all_organization_units hou '
'         WHERE     1 = 1 '
'         AND       rail.org_id = hou.organization_id (+) '
'         AND       rail.interface_line_id = err.interface_line_id (+) '
'         --and       rail.creation_date &gt; sysdate - 0.2'
'         --and       rail.org_id = 933'
'         --and       rail.interface_line_id is not null'
'--and       rail.interface_line_attribute1 in ('#39'1160049671'#39', '#39'1160049930'#39', '#39'1160050795'#39', '#39'1160051312'#39','#39'1160052103'#39', '#39'1160048979, '#39'1160049494'#39','#39'1160053457'#39', '#39'1160053721'
'order by rail.sales_order , sales_order_line'
';')
end 
    
    item 
    name= 'rct'
    description =  'rct'
    Code.Strings = (
' select       *'
'         from         ra_customer_trx_all '
'         where        1=1'
';')
end 
    
    item 
    name= 'rcta'
    description =  'rcta'
    Code.Strings = (
' select   rctt.name trx_type, '
'                  rc1.customer_name bill_to_cust,'
'                  rc1.customer_number bill_to_cust#,'
'                  rc2.customer_name ship_to_cust,'
'                  rc2.customer_number ship_to_cust#,'
'                  hzl.province,'
'                  rct.trx_number ,'
'                  rct.trx_date,'
'                  rct.interface_header_context source,     '
'                  rct.interface_header_attribute2 order_type,'
'                  rct.interface_header_attribute1,'
'                  rct.purchase_order,'
'                  rct.creation_date,'
'                  rct.created_by'
'         from     ra_customer_trx_all rct,'
'                  RA_CUST_TRX_TYPES_ALL rctt,'
'                  ra_customers rc1,'
'                  ra_customers rc2,'
'                  hz_cust_site_uses_all hcsua1,'
'                  hz_cust_acct_sites_all hcasa1 ,'
'                  hz_party_sites hps,'
'                  hz_locations hzl'
'         where    1=1'
'         and      rct.ship_to_customer_id = rc2.customer_id'
'         and      rct.bill_to_customer_id = rc1.customer_id'
'         and      rct.cust_trx_type_id = rctt.cust_trx_type_id'
'         AND        hcsua1.cust_acct_site_id = hcasa1.cust_acct_site_id'
'         AND        hcasa1.party_site_id = hps.party_site_id'
'         and        hps.location_id = hzl.location_id'
'         and        hcsua1.site_use_id = rct.ship_to_site_use_id'
'         --and      rct.customer_trx_id = rctl.customer_trx_id'
'--and      rct.creation_date  between to_date(t'#39'01-Jan-2013'#39','#39'dd-mon-yyyy'#39') and to_date('#39'10-Jan-2013'#39','#39'dd-mon-yyyy'
'--and      rct.trx_date between to_date('#39'01-Jan-2013'#39','#39'dd-mon-yyyy'#39') and to_date('#39'31-Mar-2013'#39','#39'dd-mon-yyyy'
'--and      rct.trx_date between to_date('#39'01-Apr-2013'#39','#39'dd-mon-yyyy'#39') and to_date('#39'30-Apr-2013'#39','#39'dd-mon-yyyy'
'--and      rct.trx_date between to_date('#39'01-Apr-2013'#39','#39'dd-mon-yyyy'#39') and to_date('#39'30-Apr-2013'#39','#39'dd-mon-yyyy'
'and      rct.creation_date  &gt; sysdate - 2'
'         --and     rc1.customer_name like '#39'%REBATES'#39''
'         and      rc1.customer_number like  '#39'CAFRASER'#39''
'         --AND      rct.ORG_ID = 933'
'         --and     hzl.province in ('#39'PE'#39', '#39'BC'
'--and      trx_number between '#39'30064300'#39' and '#39'30065000'#39''
'         --and      rct.interface_header_context like '#39'ORDER%ENTRY%'#39''
'         --and      rct.term_id = 1337'
'--and      rctl.vat_tax_id in (11801, 11815, 11831, 11823, 11831, 11823, 11810, 11815, 11823, 11815, 11840, 11815)'
'         --and      bill_to_customer_id = 4881639-- 4882204'
'and    rct.interface_header_attribute1  in ('#39'1160056159'#39','#39'1160056184'
'--and    customer_trx_id in (6930533, '
'         --order by hzl.province, trx_date, trx_number '
';')
end 
    
    item 
    name= 'rctaa'
    description =  'rctaa'
    Code.Strings = (
' select   rctt.name trx_type, '
'                  rc1.customer_name bill_to_cust,'
'                  rc1.customer_number bill_to_cust#,'
'                  rc2.customer_name ship_to_cust,'
'                  rc2.customer_number ship_to_cust#,'
'                  rct.trx_number ,'
'                  rct.interface_header_context source,     '
'                  rct.interface_header_attribute2 order_type,'
'                rct.interface_header_attribute1,'
'                  count(distinct rctl.customer_trx_Line_id) lines,'
'                  sum(extended_amount) value,'
'                  rct.creation_date,'
'                  rct.created_by'
'         from     ra_customer_trx_lines_all rctl,'
'                  ra_customer_trx_all rct,'
'                  RA_CUST_TRX_TYPES_ALL rctt,'
'                  AR_VAT_TAX_ALL_B tax,'
'                  ra_customers rc1,'
'                  ra_customers rc2         '
'         where    1=1'
'         and      rct.ship_to_customer_id = rc2.customer_id'
'         and      rct.bill_to_customer_id = rc1.customer_id'
'         and      rct.cust_trx_type_id = rctt.cust_trx_type_id'
'         and      rct.customer_trx_id = rctl.customer_trx_id'
'         and      tax.vat_tax_id (+)= rctl.vat_tax_id'
'--and      rct.creation_date  between to_date('#39'01-Jan-2013'#39','#39'dd-mon-yyyy'#39') and to_date('#39'10-Jan-2013'#39','#39'dd-mon-yyyy'
'and      rct.creation_date  &gt; sysdate - 0.03'
'         AND      rct.ORG_ID = 933'
'         --and      rct.term_id = 1337'
'--and      rctl.vat_tax_id in (11801, 11815, 11831, 11823, 11831, 11823, 11810, 11815, 11823, 11815, 11840, 11815)'
'         --and      bill_to_customer_id = 4881639-- 4882204'
'--and    rct.interface_header_attribute1  in('#39'3160004677'#39','#39'3160004678'
'group by '
'         rctt.name ,  rc1.customer_name,'
'                  rc1.customer_number,'
'                  rc2.customer_name,'
'                  rc2.customer_number,'
'                 rct.trx_number ,'
'                  rct.interface_header_context,     '
'                  rct.interface_header_attribute2 ,'
'                  rct.interface_header_attribute1,'
'                  rct.creation_date,'
'                  rct.created_by'
';')
end 
    
    item 
    name= 'rctl'
    description =  'rctl'
    Code.Strings = (
' select        *'
'         from        ra_customer_trx_lines_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'rctla'
    description =  'rctla'
    Code.Strings = (
' select   rctt.name trx_type,'
'                  rct.trx_number, '
'                  rct.trx_date,'
'                  rct.complete_flag,'
'                  rct.attribute14 Customer_PO, '
'                  rct.interface_header_context source,     '
'                  rct.interface_header_attribute2 order_type, '
'                  rct.interface_header_attribute1 sales_order,'
'                  rct.interface_header_attribute3 delivery_id, '
'                  --nvl(link_to_cust_trx_line_id, customer_trx_line_id), '
'                  line_number, '
'                  line_type, '
'                  rctl.inventory_item_id,'
'                  rctl.description,'
'                  tax.tax_code,'
'                  rctl.extended_amount,'
'                  rctl.taxable_amount,'
'                  rctl.amount_includes_tax_flag,'
'                  rctl.quantity_ordered,'
'                  rctl.quantity_credited,'
'                  rctl.quantity_invoiced,'
'                  rctl.unit_standard_price,'
'                  rctl.unit_selling_price,'
'                  rctl.sales_order_line,'
'                  rctl.sales_order_date,'
'                  rctl.attribute10,'
'                  rct.creation_date,'
'                  rct.created_by,'
'                  rct.last_update_date,   '
'                  rct.last_updated_by,'
'                  rctl.creation_date,'
'                  rctl.created_by,'
'                  rctl.last_update_date,   '
'                  rctl.last_updated_by,'
'                  rctl.vat_tax_id,'
'                  rct.customer_trx_id, '
'                  rctl.customer_trx_line_id,'
'                  link_to_cust_trx_line_id'
'         from     ra_customer_trx_lines_all rctl,'
'                  ra_customer_trx_all rct,'
'                  RA_CUST_TRX_TYPES_ALL rctt,'
'                  AR_VAT_TAX_ALL_B tax,'
'                  ra_customers rc1         '
'         where    1=1'
'         and      rct.bill_to_customer_id = rc1.customer_id'
'         and      rct.cust_trx_type_id = rctt.cust_trx_type_id'
'         and      rct.customer_trx_id = rctl.customer_trx_id'
'         and      rctl.vat_tax_id = tax.vat_tax_id(+)'
'         and rct.creation_date &gt;sysdate - 2'
'         AND      rct.ORG_ID = 933'
'         AND      rct.ORG_ID = 933'
'         and      rc1.customer_number like  '#39'CAFRASER'
'and    rct.interface_header_attribute1  in ('#39'1160056159'#39','#39'1160056184'
'and   rct.attribute14 like '#39'Scancode Yes'#39''
'         and  not exists ('
'         select        1'
'         from        ra_customer_trx_lines_all rctl2'
'         where        1=1'
'         and          inventory_item_id = 1800727'
'         and         rct.customer_trx_id = rctl2.customer_trx_id'
'          )'
'         order by rctl.customer_trx_id, '
'         nvl(rctl.link_to_cust_trx_line_id, rctl.customer_trx_line_id), '
'                  rctl.line_type, '
'                  rctl.line_number, '
'                  rctl.vat_tax_id'
'				  ;')
end 
    
    item 
    name= 'rctlgl'
    description =  'rctlgl'
    Code.Strings = (
' select        *'
'         from        ra_cust_trx_line_gl_dist_all'
'         where        1=1'
';')
end 
    
    item 
    name= 'recins'
    description =  'recins'
    Code.Strings = (
' DECLARE  '
'            l_record tablename%ROWTYPE;'
'         BEGIN'
'            -- Available in Oracle9i Release 2 and above'
'            INSERT INTO tablename'
'               VALUES l_record;'
'            |'
'         END;')
end 
    
    item 
    name= 'record'
    description =  'record'
    Code.Strings = (
' TYPE |RecordName IS RECORD ('
'           deptno  NUMBER;'
'           deptname dept.name%TYPE );'
'         dept_rec RecordName;')
end 
    
    item 
    name= 'recupd'
    description =  'recupd'
    Code.Strings = (
' DECLARE  '
'            l_record tablename%ROWTYPE;'
'         BEGIN'
'            -- Available in Oracle9i Release 2 and above'
'            UPDATE tablename'
'               SET ROW = l_record'
'             WHERE |;'
'         END;')
end 
    
    item 
    name= 'regx'
    description =  'regx'
    Code.Strings = (
' -- http://www.regexr.com/'
'         SELECT   party_name ,'
'         REGEXP_REPLACE( fa.TAG_NUMBER, '#39'['#39'  CHR (9) | CHR (10) || CHR (13)|| '#39']'#39') tag_number,'
'         REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 1) Cat1, '
'              REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 2) Cat2, '
'              REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 3) Cat3, '
'              REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 4) Cat4, '
'              REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 5) Cat5, '
'              REGEXP_SUBSTR(R12_CONCAT_SEGMENTS , '#39'['
'-]+'#39', 1, 6) Cat6 '
'         FROM     ha_parties'
'         WHERE    1=1'
'and      REGEXP_LIKE (party_name, '#39'Anders(o|e|a)n'#39')  --return all where party_name is either Anderson, Andersen, or Andersan. '
'and      REGEXP_LIKE (party_name, '#39''
'A(*)'#39')  -- return whose name starts with '#39'A'
'and      REGEXP_LIKE (party_name, '#39'(*)n$'#39')   -- return whose name ends with '#39'n'
'and      REGEXP_LIKE(party_name, '#39''
'[[:digit:]]+$'#39') -- returns only the records which are NUMBERS'
'and      REGEXP_LIKE(party_name, '#39''
'[[:alpha:]]+$'#39') -- returns only the records which are NUMBERS'
'and      REGEXP_LIKE(party_name, '#39''
'[[:alnum:]]+$'#39') -- returns only the records which are NUMBERS'
'and      TO_NUMBER(REGEXP_SUBSTR(party_name, '#39'\d{4}'#39')) &gt;= 2014   -- returns only the records which have 2014 or more in the string '
'and      regexp_like(party_name, '#39''
'-?[[:digit:],.]*$'#39')  -- return only the records which are number'
'and      regexp_like (ai.Invoice_num, '#39'#TRD\d{3,6}\-'#39')  -- return only records which are like TRD123, TRD1234, TRD12345, TRD123456'
'and      REGEXP_LIKE (batch_name, '#39''
'([PL]|[IN]|[TH]|[CN]|)'#39')  --return all where batch like PL% IN% TH% CN% '
';')
end 
    
    item 
    name= 'reqdtl'
    description =  'reqdtl'
    Code.Strings = (
' SELECT * '
'         FROM PO_REQUISITION_LINES_ALL'
'         WHERE 1 = 1'
'         AND REQUISITION_HEADER_ID LIKE 2807'
';')
end 
    
    item 
    name= 'reqgrpprog'
    description =  'reqgrpprog'
    Code.Strings = (
' SELECT fcp.user_concurrent_program_name , frg.REQUEST_GROUP_NAME, frg.REQUEST_GROUP_ID,fat.application_name '
'         FROM FND_REQUEST_GROUP_UNITS  frgu, '
'         fnd_request_groups frg, '
'         fnd_concurrent_programs_vl fcp, '
'         fnd_application_tl fat'
'         WHERE    1=1 '
'         AND  fat.application_id = frg.APPLICATION_ID'
'         AND  frg.request_group_id = frgu.request_group_id '
'         --and  REQUEST_GROUP_NAME = '#39'MAS PA SUPER USER'#39' '
'         AND  fcp.APPLICATION_ID    = frgu.UNIT_APPLICATION_ID '
'         AND  fcp.concurrent_program_id =  frgu.REQUEST_UNIT_ID '
'AND  fcp.user_concurrent_program_name    LIKE '#39'MAS Projects Transaction Interface Exception Update'#39'--CONCURRENT PROGRAM SHORT NAME '
'         ORDER BY 1'
';')
end 
    
    item 
    name= 'reqgrpreq'
    description =  'reqgrpreq'
    Code.Strings = (
' SELECT frs.USER_REQUEST_SET_NAME , frg.REQUEST_GROUP_NAME, frg.REQUEST_GROUP_ID,fat.application_name '
'         FROM FND_REQUEST_GROUP_UNITS  frgu,'
'          fnd_request_groups frg,'
'          FND_REQUEST_SETS_VL frs,'
'          fnd_application_tl fat'
'         WHERE 1=1'
'         AND  fat.application_id = frg.APPLICATION_ID'
'         AND  frg.request_group_id = frgu.request_group_id'
'         --and  REQUEST_GROUP_NAME = '#39'MAS PA SUPER USER'#39''
'         AND  frs.APPLICATION_ID = frgu.UNIT_APPLICATION_ID      '
'         AND  frs.REQUEST_SET_ID =  frgu.REQUEST_UNIT_ID'
'       AND  frs.USER_REQUEST_SET_NAME LIKE '#39'MasTec CO EFI Rev/Bill with AP Interface'#39''
'         ORDER BY 1'
';')
end 
    
    item 
    name= 'reqhdr'
    description =  'reqhdr'
    Code.Strings = (
' SELECT * '
'         FROM PO_REQUISITION_HEADERS_ALL'
'         WHERE 1 = 1'
'         AND ATTRIBUTE10 LIKE '#39'7HC7450700'
';')
end 
    
    item 
    name= 'ril'
    description =  'ril'
    Code.Strings = (
' SELECT   to_char(sysdate ,'#39'YYYY-MM-DD HH24:MI:SS'#39') query_run_time,'
'                 rail.creation_date  Creation_date, '
'                 hou.name ORG_NAME,'
'                (SELECT customer_name '
'                 FROM ra_customers'
'                 WHERE 1 = 1'
'        and customer_id = orig_system_bill_customer_id) customer,'
'                 rail.interface_line_id,'
'                 rail.interface_status,'
'                 rail.batch_source_name,       '
'                 interface_line_attribute2 order_type,'
'                 rail.sales_order ,'
'                 rail.sales_order_date, '
'                 rail.sales_order_line,'
'                 rail.amount,'
'                 rail.tax_code,'
'                 rail.tax_rate,'
'                 rail.vat_tax_id, '
'        case when err.interface_line_id is null  then '#39'No'#39' else '#39'Yes'#39' end LINE_IN_ERROR, '
'                 err.message_text, '
'                 err.invalid_value, '
'                 rail.INTERFACE_LINE_CONTEXT,'
'                 interface_line_attribute1,'
'                 interface_line_attribute3,'
'                 interface_line_attribute4,'
'                 interface_line_attribute5,'
'                 interface_line_attribute6,'
'                 interface_line_attribute7,'
'                 interface_line_attribute8,'
'                 interface_line_attribute9,'
'                 rail.term_id, '
'                 rail.orig_system_bill_customer_id, --used for VAT '
'                rail.orig_system_bill_address_id,  --used for VAT '
'                rail.orig_system_ship_customer_id ,'
'                rail.orig_system_ship_address_id ,'
'                rail.orig_system_sold_customer_id, '
'                rail.ship_date_actual ,'
'                rail.inventory_item_id, '
'                 rail.DESCRIPTION,'
'                rail.tax_code ,'
'                rail.tax_rate ,'
'                rail.vat_tax_id ,'
'                rail.warehouse_id ,'
'                rail.interface_line_attribute1 SALES_ORDER2, '
'                rail.attribute14 PO_NUMBER ,'
'                rail.attribute15 SALES_REP_ID '
'         --        ,rail.*'
'           FROM ra_interface_lines_all rail, '
'               ra_interface_errors_all err, '
'                hr_all_organization_units hou '
'           WHERE 1=1 '
'           and rail.creation_date &gt; sysdate - 0.2'
'          and  rail.org_id = 933'
'             AND rail.org_id = hou.organization_id (+) '
'             AND rail.interface_line_id = err.interface_line_id (+) '
'          --  and rail.interface_line_id is not null'
'--  and rail.interface_line_attribute1 in ('#39'1160049671'#39', '#39'1160049930'#39', '#39'1160050795'#39', '#39'1160051312'#39','#39'1160052103'#39', '#39'1160048979'#39', '#39'1160049494'#39','#39'1160053457'#39', '#39'1160053721'
'order by rail.sales_order , sales_order_line'
';')
end 
    
    item 
    name= 'setapp'
    description =  'setapp'
    Code.Strings = (
' BEGIN'
'         -- fnd_global.apps_initialize(userId, resp_id,resp_app_id);'
'         --mo_global.init('#39'AR'#39');'
'            MO_GLOBAL.SET_POLICY_CONTEXT('#39'S'#39',2000);'
'            fnd_global.apps_initialize(1130, 50737,275); '
'         END;'
'         /')
end 
    
    item 
    name= 'setmo'
    description =  'setmo'
    Code.Strings = (
' begin'
'         -- mo_global.set_policy_context(scope,org_id);       '
'         mo_global.init('#39'AR'#39'); '
'         mo_global.set_policy_context('#39'S'#39','#39'10044'#39'); '
'         end;'
'         ')
end 
    
    item 
    name= 'setorg'
    description =  'setorg'
    Code.Strings = (
' begin'
'              dbms_application_info.set_client_info(org_id);'
'         end;')
end 
    
    item 
    name= 'slct'
    description =  'slct'
    Code.Strings = (
' SELECT    *'
'FROM      '
'WHERE     1 = 1'
';')
end 
    
    item 
    name= 'tai'
    description =  'tai'
    Code.Strings = (
' ap_invoices_all ')
end 
    
    item 
    name= 'taid'
    description =  'taid'
    Code.Strings = (
' ap_invoice_distributions_all')
end 
    
    item 
    name= 'tail'
    description =  'tail'
    Code.Strings = (
' ap_invoice_lines_all')
end 
    
    item 
    name= 'thaou'
    description =  'thaou'
    Code.Strings = (
' hr_all_organization_units')
end 
    
    item 
    name= 'tmoum'
    description =  'tmoum'
    Code.Strings = (
' modutl_operating_units_map')
end 
    
    item 
    name= 'tmsi'
    description =  'tmsi'
    Code.Strings = (
' mtl_system_items_b ')
end 
    
    item 
    name= 'tpdi'
    description =  'tpdi'
    Code.Strings = (
' pa_draft_invoices_all')
end 
    
    item 
    name= 'tpdid'
    description =  'tpdid'
    Code.Strings = (
' pa_draft_invoice_details_all')
end 
    
    item 
    name= 'tpe'
    description =  'tpe'
    Code.Strings = (
' pa_expenditures_all')
end 
    
    item 
    name= 'tpei'
    description =  'tpei'
    Code.Strings = (
' pa_expenditure_items_all')
end 
    
    item 
    name= 'tpp'
    description =  'tpp'
    Code.Strings = (
' pa_projects_all '
      )
end 
    
    item 
    name= 'trct'
    description =  'trct'
    Code.Strings = (
' ra_customer_trx_all ')
end 
    
    item 
    name= 'ups'
    description =  'ups'
    Code.Strings = (
' BEGIN'
'            SAVEPOINT my_point;'
'            UPDATE | SET ;'
'         EXCEPTION'
'            WHEN OTHERS THEN'
'               ROLLBACK TO my_point;'
'         END;')
end 
    
    item 
    name= 'utlfexc'
    description =  'utlfexc'
    Code.Strings = (
' DECLARE'
'            fid UTL_FILE.FILE_TYPE;'
'         '
'            PROCEDURE recNgo (str IN VARCHAR2)'
'            IS'
'            BEGIN'
'               DBMS_OUTPUT.PUT_LINE (CONCAT('#39'UTL_FILE error: '#39', str));'
'               UTL_FILE.FCLOSE (fid);'
'            END;'
'         BEGIN'
'         '
'             |'
'         '
'         EXCEPTION'
'            WHEN UTL_FILE.INVALID_PATH'
'             THEN recNgo ('#39'invalid_path'#39'); '
'            WHEN UTL_FILE.INVALID_MODE'
'             THEN recNgo ('#39'invalid_mode'#39');'
'            WHEN UTL_FILE.INVALID_FILEHANDLE'
'             THEN recNgo ('#39'invalid_filehandle'#39');'
'            WHEN UTL_FILE.INVALID_OPERATION'
'             THEN recNgo ('#39'invalid_operation'#39');'
'            WHEN UTL_FILE.READ_ERROR'
'             THEN recNgo ('#39'read_error'#39');'
'            WHEN UTL_FILE.WRITE_ERROR'
'             THEN recNgo ('#39'write_error'#39');'
'            WHEN UTL_FILE.INTERNAL_ERROR'
'             THEN recNgo ('#39'internal_error'#39');'
'            WHEN OTHERS'
'             THEN recNgo (SQLERRM);'
'         END;')
end 
    
    item 
    name= 'view'
    description =  'view'
    Code.Strings = (
' select        *'
'         from        all_views '
'         where        1=1'
'         and view_name like ')
end 
    
    item 
    name= 'vp'
    description =  'vp'
    Code.Strings = (
' SELECT    *'
'         FROM      v$parameter'
'         WHERE     1 = 1'
'         and       name like '#39'user%dump%dest%'
';')
end 
    
    item 
    name= 'xplan'
    description =  'xplan'
    Code.Strings = (
' select        *'
'         from     table(dbms_xplan.display)')
end 
      >
    SubAnalyzers = <
      item
        DisplayName = 'Java'
        StartExpression = '\s+JAVA\s+SOURCE\s+NAMED(.|\s)*?(AS|IS)\s+       '
        EndExpression = '\}.*?(\r|\n)+?\/'
        SyntAnalyzer = SyntAnal5
      end>
    SampleText.Strings = (
      '/* This calculates a nextdate for a defined interval.'
      
        '   The function works similar to the functionality in DBMS_JOB *' +
        '/'
      ''
      'FUNCTION calc_next_date ('
      '   i_interval   IN   VARCHAR2,'
      '   i_default    IN   DATE DEFAULT SYSDATE'
      ')'
      '   RETURN DATE'
      'IS'
      '   v_date        DATE;'
      '   v_statement   VARCHAR2 (5000);'
      'BEGIN'
      '   IF i_interval IS NULL'
      '   THEN'
      
        '      RETURN (i_default);  -- if no interval defined return the ' +
        'default value'
      '   ELSE'
      '      v_statement := '#39'SELECT '#39' || i_interval || '#39' FROM DUAL'#39';'
      ''
      '      EXECUTE IMMEDIATE v_statement'
      '                   INTO v_date;'
      ''
      '      RETURN (v_date);'
      '   END IF;'
      'EXCEPTION'
      '   WHEN OTHERS'
      '   THEN'
      '      -- if any error occurs, return the default value'
      '      RETURN (i_default);'
      'END calc_next_date;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'SQL FNC JAVA JVS PKB PKS PRC TPB TPS TRG VW PLS'
    LexerName = 'PL/SQL'
    LineComment = '--'
    Left = 140
    Top = 160
  end
  object SyntAnalyzer9: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        HighlightPos = cpAny
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'Tag block end'
        HighlightPos = cpAny
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '<!--  ...  -->'
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'htm html'
    LexerName = 'HTML Documents'
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'HEX'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'HEX'
        TokenType = 7
        Expression = '[\da-f]+h'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Ident'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Reserved words'
        StyleName = 'reserved words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'si'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      '  CODE'#9'SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39#39'Hello World'#39#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      ''
      '  CODE'#9'ENDS'
      'END')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'asm'
    LexerName = 'Assembler'
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clLime
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*')
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpAny
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'namespace'
        ConditionList = <
          item
            TagList.Strings = (
              'namespace')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockName = 'Begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '/* ... */'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = '#Region begin'
        ConditionList = <
          item
            TagList.Strings = (
              '\#region')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '#End region'
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '#End region'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endregion')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '// C# syntax highlighting '
      'public class Stack'
      '{'
      '  private Node first = null;'
      '  public bool Empty {'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can'#39't Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'c cpp h cs'
    LexerName = 'C#'
    LineComment = '//'
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'do'
              'double'
              'else'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'goto'
              'if'
              'implements'
              'import'
              'instanceof'
              'int'
              'interface'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'void'
              'volatile'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function begin'
        BlockName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'class end'
        Enabled = False
        BlockName = 'class start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Java syntax highlighting */'
      'import java.util.*;'
      ''
      '/** Example class */'
      'public class Sample {'
      '  public static void main(String[] args) {'
      '    int i = 0;'
      '    for(i = 0; i < 10; i++)'
      '      System.out.println("Hello world");'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'java'
    LexerName = 'Java Builder'
  end
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$.\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Something'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      '$_ = $password1;'
      'sub WriteBack {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Something')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'pl pm cgi pod'
    LexerName = 'Perl'
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16119285
        FormatType = ftColor
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 15987689
      end
      item
        DisplayName = 'Code block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15856098
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Code border'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'HTML'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
        Font.Style = []
        FormatType = ftCustomFont
      end>
    TokenRules = <
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)"(\\"|.)*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'string 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'class'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'int'
              'isset'
              'old_function'
              'print'
              'pval'
              'require'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'var'
              'void'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'#13#10
        EndExpression = '<\?'#13#10
        SyntAnalyzer = SyntAnalyzer9
        FromTextBegin = True
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'php'
    LexerName = 'PHP'
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward'
              'of')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '{$endif}')
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'repeat ...'
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeItemImage = 1
      end
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
      end
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
      end
      item
        DisplayName = 'record'
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s-2 %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
      end
      item
        DisplayName = 'end of type'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '{ ... }'
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Interface section'
        StyleName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
      end
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Implementation section'
        StyleName = 'Implemenation Section'
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
      end
      item
        DisplayName = 'finalization'
        ConditionList = <
          item
            TagList.Strings = (
              'finalization')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0'
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockName = 'Implementation section'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        CancelNextRules = True
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '('
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'#13#10
        EndExpression = 'end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'implementation'
      '{Syntax highlighting}'
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caprion := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = 
      'Skip = <Comment> | <Preprocessor>;'#13#10#13#10'// Class declaration'#13#10'Clas' +
      'sDecl = <Identifier> '#39'='#39' '#39'class'#39' InheritedList? <Identifier>;'#13#10#13 +
      #10'EmptyClass = <Identifier> '#39'='#39' "class" InheritedList '#39';'#39'; '#13#10#13#10'//' +
      ' Interface declaration'#13#10'IntfDecl = <Identifier> '#39'='#39' ("interface"' +
      ' | "dispinterface") InheritedList? IntfNextToken;'#13#10'IntfNextToken' +
      ' = '#39'['#39' | <Identifier>; '#13#10#13#10'InheritedList = '#39'('#39' IdentList '#39')'#39';'#13#10'I' +
      'dentList = <Identifier> ('#39','#39' <Identifier>)*;'#13#10
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'pas inc dpr dpk'
    LexerName = 'Pascal'
    LineComment = '//'
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Plain Text'
  end
end
